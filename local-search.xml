<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>monkey日志管理</title>
    <link href="/2021/09/07/monkey%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <url>/2021/09/07/monkey%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义脚本的稳定性测试"><a href="#自定义脚本的稳定性测试" class="headerlink" title="自定义脚本的稳定性测试"></a>自定义脚本的稳定性测试</h1><p>常规Monkey测试执行的是随机的事件流，但如果只是想让Monkey测试某个特定场景这时候就需要用到自定义脚本了，Monkey支持执行用户自定义脚本的测试，用户只需要按照Monkey脚本的规范编写好脚本，存放到手机上，启动Monkey通过-f 参数调用脚本即可</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="获取元素坐标点位置"><a href="#获取元素坐标点位置" class="headerlink" title="获取元素坐标点位置"></a>获取元素坐标点位置</h2><p>Monkey脚本只能通过<strong>坐标</strong>的方式来定位点击和移动事件的屏幕位置，这里就需要提前获取坐标信息。获取坐标信息的方法很多，最简单的方法就是打开手机中的开发人员选项，打开“显示指针位置”。随后，在屏幕上的每次操作，在导航栏上都会显示坐标信息。</p><h2 id="monkey脚本API"><a href="#monkey脚本API" class="headerlink" title="monkey脚本API"></a>monkey脚本API</h2><p>LaunchActivity(pkg_name, cl_name)：启动应用的Activity。参数：包名和启动的Activity。</p><p>Tap(x, y, tapDuration)： 模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略。</p><p>UserWait(sleepTime)： 休眠一段时间</p><p>DispatchPress(keyName)： 按键。参数： keycode。 RotateScreen(rotationDegree, persist)： 旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变。</p><p>DispatchString(input)： 输入字符串。</p><p>DispatchFlip(true/false)： 打开或者关闭软键盘。</p><p>PressAndHold(x, y, pressDuration)： 模拟长按事件。</p><p>Drag(xStart, yStart, xEnd, yEnd, stepCount)： 用于模拟一个拖拽操作。</p><p>PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount)： 模拟缩放手势。</p><p>LongPress()： 长按2秒。</p><p>DeviceWakeUp()： 唤醒屏幕。</p><p>PowerLog(power_log_type, test_case_status)： 模拟电池电量信息。</p><p>WriteLog()： 将电池信息写入sd卡。</p><p>RunCmd(cmd)： 运行shell命令。</p><p>DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFlags)： 向指定位置，发送单个手势。</p><p>DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFilags)： 发送按键消息。</p><p>LaunchInstrumentation(test_name,runner_name)： 运行一个instrumentation测试用例。</p><p>DispatchTrackball： 模拟发送轨迹球事件。</p><p>ProfileWait： 等待5秒。</p><p>StartCaptureFramerate()： 获取帧率。</p><p>EndCaptureFramerate(input)： 结束获取帧率。</p><h2 id="monkey脚本格式"><a href="#monkey脚本格式" class="headerlink" title="monkey脚本格式"></a>monkey脚本格式</h2><p><strong>头部</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">type</span> = raw events  </span><br><span class="hljs-title">count</span> = <span class="hljs-number">1</span>  <br><span class="hljs-title">speed</span> = <span class="hljs-number">1.0</span>  <br>//下面为monkey命令  <br><span class="hljs-title">start</span> <span class="hljs-class"><span class="hljs-keyword">data</span> &gt;&gt;   </span><br>具体的monkey脚本内容  <br></code></pre></td></tr></table></figure><p><strong>编写脚本</strong></p><p><strong>kyb.txt</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#头文件信息<br><br>type = raw events <br><br>count = <span class="hljs-number">1</span><br><br>speed = <span class="hljs-number">1.0</span><br><br>#启动测试<br>start data &gt;&gt;<br><br><span class="hljs-function"><span class="hljs-title">LaunchActivity</span><span class="hljs-params">(com.tal.kaoyan,com.tal.kaoyan.ui.activity.SplashActivity)</span></span><br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">624</span>,<span class="hljs-number">900</span>,<span class="hljs-number">1000</span>)</span></span> #点击取消升级<br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">806</span>,<span class="hljs-number">64</span>,<span class="hljs-number">1000</span>)</span></span> #点击跳过<br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">217</span>,<span class="hljs-number">378</span>,<span class="hljs-number">1000</span>)</span></span> #点击用户名输入框<br><span class="hljs-function"><span class="hljs-title">DispatchString</span><span class="hljs-params">(账户)</span></span><br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">197</span>,<span class="hljs-number">461</span>,<span class="hljs-number">1000</span>)</span></span> #点击密码输入框<br><span class="hljs-function"><span class="hljs-title">DispatchString</span><span class="hljs-params">(密码)</span></span><br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">343</span>,<span class="hljs-number">637</span>,<span class="hljs-number">1000</span>)</span></span> #点击登录按钮<br></code></pre></td></tr></table></figure><p><strong>执行脚本</strong></p><p>脚本编写完成后，传到手机设备上，然后执行。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">adb push C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\a</span>dmin<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\k</span>yb1.txt /sdcard<br><br>adb shell monkey -f /sdcard/kyb1.txt -v 1<br></code></pre></td></tr></table></figure><p><strong>执行结果</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">C:\Users\admin&gt;adb shell monkey -f /sdcard/kyb.txt -v 1<br><span class="hljs-meta">:Monkey:</span> seed=1524592021303 count=1<br><span class="hljs-meta">:IncludeCategory:</span> android.intent.category.LAUNCHER<br><span class="hljs-meta">:IncludeCategory:</span> android.intent.category.MONKEY<br>Replaying 0 events with speed 1.0<br><span class="hljs-meta">:Switch:</span> #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10200000;component=com.tal.kaoyan/.ui.activity.SplashActivity;end<br><span class="hljs-code">    // Allowing start of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.tal.kaoyan/.ui.activity.SplashActivity &#125; in package com.tal.kaoyan</span><br><span class="hljs-meta">:Sending Touch (ACTION_DOWN):</span> 0:(267.0,1233.0)<br><span class="hljs-code">    // Allowing start of Intent &#123; act=com.android.systemui.recent.action.TOGGLE_RECENTS cmp=com.android.systemui/.recent.RecentsActivity &#125; in package com.android.systemui</span><br><span class="hljs-meta">:Sending Touch (ACTION_UP):</span> 0:(267.0,1233.0)<br>Events injected: 5<br>:Sending rotation degree=0, persist=false<br><span class="hljs-meta">:Dropped:</span> keys=0 pointers=0 trackballs=0 flips=0 rotations=0<br>## Network stats: elapsed time=7201ms (0ms mobile, 0ms wifi, 7201ms not connected)<br><span class="hljs-comment">// Monkey finished</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>头文件代码书写注意“=”两边预留空格，否则会出现如下报错</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NumberFormatException</span>: Invalid int: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/mgzc-1508873480/p/7911373.html">参考资料</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>monkey日志管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>从0开始搭建一个博客站点</title>
    <link href="/2021/09/07/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/"/>
    <url>/2021/09/07/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Hexo的入门"><a href="#1-Hexo的入门" class="headerlink" title="1.Hexo的入门"></a>1.Hexo的入门</h1><p> hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。</p><p> hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。</p><p>参考：<a href="https://hexo.io/zh-cn/docs/configuration">官网文档</a></p><h2 id="1-1安装node-js"><a href="#1-1安装node-js" class="headerlink" title="1.1安装node.js"></a>1.1安装node.js</h2><p><a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">网上安装教程</a></p><p><strong>验证安装是否成功</strong></p><ol><li><p>进入cmd</p></li><li><p>输入node -v</p></li><li><p>出现相应的版本号ok</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;node -v</span><br><span class="line">v14.17.5</span><br></pre></td></tr></table></figure></li></ol><h2 id="1-2安装git"><a href="#1-2安装git" class="headerlink" title="1.2安装git"></a>1.2安装git</h2><p><a href="https://blog.csdn.net/huangqqdy/article/details/83032408">git安装教程</a></p><p><strong>验证git安装成功与否</strong></p><ol><li><p>进入cmd</p></li><li><p>输入 git version</p></li><li><p>出现相应的版本号ok</p></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">C:\Windows\System32&gt;git version</span><br><span class="line">git version 2.33.0.windows.2</span><br></pre></td></tr></table></figure><h2 id="1-3安装、配置hexo文件"><a href="#1-3安装、配置hexo文件" class="headerlink" title="1.3安装、配置hexo文件"></a>1.3安装、配置hexo文件</h2><p>1.进入git bash窗口</p><p>2.输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g hexo-cli</span><br></pre></td></tr></table></figure><p>3.出现一堆代码</p><p>4.输入以下命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo init d:/文件夹名 ----表示在d盘创建这个文件夹 </span><br><span class="line">cd 文件名 ----进入文件夹 </span><br><span class="line">npm install ----安装</span><br></pre></td></tr></table></figure><h2 id="1-4关于hexo文件夹里面的内容"><a href="#1-4关于hexo文件夹里面的内容" class="headerlink" title="1.4关于hexo文件夹里面的内容"></a>1.4关于hexo文件夹里面的内容</h2><h3 id="1-4-1-hexo文件目录"><a href="#1-4-1-hexo文件目录" class="headerlink" title="1.4.1 hexo文件目录"></a>1.4.1 hexo文件目录</h3><p>安装hexo完毕，d盘目录下你创建的文档下面的内容：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">├── _config.yml</span><br><span class="line">├── .deploy_git</span><br><span class="line">├── .github</span><br><span class="line">├── public</span><br><span class="line">├── themes</span><br><span class="line">├── source</span><br><span class="line">|   └── .gitkeep </span><br><span class="line">├── scraffolds</span><br><span class="line">|   ├── draft.md</span><br><span class="line">    ├── page.md</span><br><span class="line">    └── post.md</span><br></pre></td></tr></table></figure><h3 id="1-4-2-hexo目录文件介绍（了解）"><a href="#1-4-2-hexo目录文件介绍（了解）" class="headerlink" title="1.4.2 hexo目录文件介绍（了解）"></a>1.4.2 hexo目录文件介绍（了解）</h3><p><strong>_confifig.yml</strong></p><p>网站的配置信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong></p><p>已经默认给你安装的应用程序的信息</p><p><strong>scaffffolds</strong></p><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffffold 来建立文件，了解即可</p><p><strong>source</strong></p><p>资源文件夹是存放用户资源的地方。一般你通过命令创建的文章都存储在 <code>_posts</code> 文件夹里面</p><p><strong>themes</strong></p><p>这个主要存放的hexo的主题文件，类似英雄皮肤，通过更改不同主题来实现不同酷炫的效果。</p><h2 id="1-5-confifig-yml配置文件详解（了解）"><a href="#1-5-confifig-yml配置文件详解（了解）" class="headerlink" title="1.5_confifig.yml配置文件详解（了解）"></a>1.5_confifig.yml配置文件详解（了解）</h2><h3 id="1-5-1网站相关"><a href="#1-5-1网站相关" class="headerlink" title="1.5.1网站相关"></a>1.5.1网站相关</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title </code></td><td>网站标题</td></tr><tr><td><code>subtitle         </code></td><td>网站副标题</td></tr><tr><td><code>description      </code></td><td>网站描述</td></tr><tr><td><code>author           </code></td><td>你的名字</td></tr><tr><td><code>language         </code></td><td>网站使用的语言</td></tr><tr><td><code>timezone         </code></td><td>网站时区<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a></td></tr></tbody></table><h3 id="1-5-2网址相关"><a href="#1-5-2网址相关" class="headerlink" title="1.5.2网址相关"></a>1.5.2网址相关</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>url                        </code></td><td>网址</td></tr><tr><td><code>root                    </code></td><td>网站根目录</td></tr><tr><td><code>permalink                </code></td><td>文章<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td></tr><tr><td><code>permalink_defaults        </code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><h3 id="1-5-3目录相关"><a href="#1-5-3目录相关" class="headerlink" title="1.5.3目录相关"></a>1.5.3目录相关</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source </code></td></tr><tr><td><code>public_dir</code></td><td><code>公共文件夹，这个文件夹用于存放生成的站点文件。</code></td><td><code>public</code></td></tr><tr><td><code>archive_dir</code></td><td>标签文件夹</td><td><code>tags </code></td></tr><tr><td><code>category_dir</code></td><td><code>归档文件夹</code></td><td><code>categories </code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td><code>国际化（i18n）文件夹 </code></td><td><code>:lang </code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><h3 id="1-5-4日期与格式"><a href="#1-5-4日期与格式" class="headerlink" title="1.5.4日期与格式"></a>1.5.4日期与格式</h3><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th><strong>参数</strong></th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD </code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h2 id="1-6hexo相关命令"><a href="#1-6hexo相关命令" class="headerlink" title="1.6hexo相关命令"></a>1.6hexo相关命令</h2><p><a href="https://www.cnblogs.com/wsmrzx/p/9439448.html">指令参考</a></p><h2 id="1-7建立远程博客访问"><a href="#1-7建立远程博客访问" class="headerlink" title="1.7建立远程博客访问"></a>1.7建立远程博客访问</h2><h3 id="1-7-1-本地启动hexo"><a href="#1-7-1-本地启动hexo" class="headerlink" title="1.7.1 本地启动hexo"></a>1.7.1 本地启动hexo</h3><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo server 或者 hexo s</span><br></pre></td></tr></table></figure><p>浏览器访问网址：<code>http://localhost:4000/</code></p><p><strong>至此，你的hexo本地博客已经搭建成功。</strong></p><h3 id="1-7-2GithubPages的使用"><a href="#1-7-2GithubPages的使用" class="headerlink" title="1.7.2GithubPages的使用"></a>1.7.2GithubPages的使用</h3><p>在开始之前创建<a href="https://github.com/">github官网</a>账号，并创建一个仓库</p><p><strong>注意仓库名的格式：</strong></p><p>仓库名为：<strong>Github账号名称.github.io</strong></p><p>1.安装 <code>hexo-deployer-git</code>插件。在命令（Git Bash）运行以下命令</p><p><code>$ npm install hexo-deployer-git --save </code></p><p>2.添加SSH key</p><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可。</p><p>邮箱地址和注册github的邮箱保持一致。</p><p><code>$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; </code></p><p>添加到 github。 复制密钥文件内容（路径形如 <code>C:\users\administrator\.ssh\id_rsa.pub</code>)，粘贴到 <a href="https://github.com/isaacs/node-glob">New SSH KEY</a>即可。</p><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ssh -T git@github.com </span><br><span class="line">$ yes</span><br></pre></td></tr></table></figure><p>3.修改 <strong>_config.yml</strong> （在站点目录下）。文件末尾修改为：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># Deployment </span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html </span><br><span class="line">deploy:</span><br><span class="line">type: git </span><br><span class="line">repo: git@github.com:&lt;Github账号名称&gt;/&lt;Github账号名称&gt;.github.io.git </span><br><span class="line">branch: master</span><br></pre></td></tr></table></figure><p>注意：上面的格式type和repo的冒号后面需要空格两下；</p><p>​            上面仓库地址写ssh地址，不写http地址 。</p><p>4.推送到GithubPages。在命令行（即Git Bash）依次输入以下命令，返回 <code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g </span><br><span class="line">$ hexo d</span><br></pre></td></tr></table></figure><p>或</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo g -d</span><br></pre></td></tr></table></figure><p>5.等待1分钟左右，浏览器访问网址： <strong>https://&lt;Github账号</strong></p><p><strong>名称&gt;.github.io</strong></p><p><strong>至此，您的Hexo博客已经搭建在GithubPages, 域名为 https://&lt;Github账号名称&gt;.github.io 。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo 搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yaml</title>
    <link href="/2021/09/06/yaml/"/>
    <url>/2021/09/06/yaml/</url>
    
    <content type="html"><![CDATA[<h2 id="一、yaml概述"><a href="#一、yaml概述" class="headerlink" title="一、yaml概述"></a>一、yaml概述</h2><h4 id="1、yaml简介"><a href="#1、yaml简介" class="headerlink" title="1、yaml简介"></a>1、yaml简介</h4><p>YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。比如同一段数据Josn和Yaml的表示分别如下：</p><p><strong>Jason</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123; name: &#x27;Tom Smith&#x27;,age: 37,spouse: &#123; name: &#x27;Jane Smith&#x27;, age: 25 &#125;,children: [ &#123; name: &#x27;Jimmy Smith&#x27;, age: 15 &#125;,&#123; name: &#x27;Jenny Smith&#x27;, age: 12 &#125; ] &#125;</span><br></pre></td></tr></table></figure><p><strong>yaml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name: Tom Smith</span><br><span class="line">age: 37</span><br><span class="line">spouse:</span><br><span class="line">    name: Jane Smith</span><br><span class="line">    age: 25</span><br><span class="line">children:</span><br><span class="line">  name: Jimmy Smith</span><br><span class="line">   age: 15</span><br><span class="line">  name: Jenny Smith</span><br><span class="line">   age: 12</span><br></pre></td></tr></table></figure><h4 id="2、语法特点"><a href="#2、语法特点" class="headerlink" title="2、语法特点"></a>2、语法特点</h4><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同曾记得元素左侧对齐即可</li></ul><h4 id="3、下载安装"><a href="#3、下载安装" class="headerlink" title="3、下载安装"></a>3、下载安装</h4><p>cmd中输入</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip install pyyaml</span><br></pre></td></tr></table></figure><p>或者<a href="http://pyyaml.org/wiki/PyYAML">官网</a>下载</p><h2 id="二、yaml数据类型详解"><a href="#二、yaml数据类型详解" class="headerlink" title="二、yaml数据类型详解"></a>二、yaml数据类型详解</h2><h4 id="1、支持数据类型"><a href="#1、支持数据类型" class="headerlink" title="1、支持数据类型"></a>1、支持数据类型</h4><ol><li><strong>纯量</strong>(scalars):单个的、不可再分的值。</li><li><strong>数组</strong>：一组按次序排列的值，又称为序列(sequence)/列表(list)</li><li><strong>对象</strong>：键值对的集合，又称为映射/哈希/字典</li></ol><h4 id="2、纯量"><a href="#2、纯量" class="headerlink" title="2、纯量"></a>2、纯量</h4><p>数据最小的单位，不可以再分割。类似于python中的单个变量。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">flag</span><br></pre></td></tr></table></figure><h4 id="3、list数组"><a href="#3、list数组" class="headerlink" title="3、list数组"></a>3、list数组</h4><p>与Python的list结构类似，数组元素使用“-”开头，也可以根据缩进进行数组嵌套。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">- Jack</span><br><span class="line">- Harry</span><br><span class="line">- Sunny</span><br><span class="line"></span><br><span class="line"># 也可以写成一行</span><br><span class="line">[Jack,Harry,Sunny]</span><br></pre></td></tr></table></figure><p>对应到python的list写法如下：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;Jack&#x27;,&#x27;Harry&#x27;,&#x27;Sunny&#x27;]</span><br></pre></td></tr></table></figure><h4 id="4、对象"><a href="#4、对象" class="headerlink" title="4、对象"></a>4、对象</h4><p>对象的一组键值对，使用冒号结构表示。类似Python中的字典数据结构。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">platformName: Android</span><br><span class="line">platformVersion: 7.1.2</span><br><span class="line"></span><br><span class="line"># Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</span><br><span class="line">&#123;platformName: Android,platformVersion: 7.1.2&#125;</span><br></pre></td></tr></table></figure><p><strong>注意：冒号后面一定要有空格！对应到python字典的写法如下：</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;platformName&#x27;: &#x27;Android&#x27;, &#x27;platformVersion&#x27;: &#x27;6.0.1&#x27;&#125;</span><br></pre></td></tr></table></figure><h4 id="5、数据嵌套"><a href="#5、数据嵌套" class="headerlink" title="5、数据嵌套"></a>5、数据嵌套</h4><p>yaml数据嵌套表示可以将上面的各类数据根据实际场景进行组合嵌套。</p><p><strong>eg</strong>：Tom Smith 37岁，他有一个妻子叫 Jane Smith，35岁。 另外他有2个孩子，一个叫Jimmy Smith，15岁；另外一个叫Jenny Smith ，12岁。</p><p><strong>familyInfo.yaml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">name: Tom Smith</span><br><span class="line">age: 37</span><br><span class="line">spouse:</span><br><span class="line">    name: Jane Smith</span><br><span class="line">    age: 35</span><br><span class="line">children:</span><br><span class="line"> - name: Jimmy Smith</span><br><span class="line">   age: 15</span><br><span class="line"> - name: Jenny Smith</span><br><span class="line">   age: 12</span><br></pre></td></tr></table></figure><p>转化为python：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#x27;name&#x27;:&#x27;Tom Smith&#x27;,&#x27;age&#x27;:37,&#x27;spouse&#x27;:&#123;&#x27;name&#x27;:&#x27;Jane Smith&#x27;,&#x27;age&#x27;:25&#125;,&#x27;childern&#x27;:[&#123;&#x27;name&#x27;:&#x27;Jimmy Smith&#x27;,&#x27;age&#x27;:15&#125;,&#123;&#x27;name&#x27;:&#x27;Jenny Smith&#x27;,&#x27;age&#x27;:12&#125;]&#125;</span><br></pre></td></tr></table></figure><h2 id="三、yaml数据操作"><a href="#三、yaml数据操作" class="headerlink" title="三、yaml数据操作"></a>三、yaml数据操作</h2><h4 id="1、数据读取"><a href="#1、数据读取" class="headerlink" title="1、数据读取"></a>1、数据读取</h4><h5 id="1）测试场景"><a href="#1）测试场景" class="headerlink" title="1）测试场景"></a>1）测试场景</h5><ul><li>读取配置中的所有信息</li><li>读取yaml数据表中Tom Smith的姓名、年龄、信息</li><li>单独读取配偶的姓名和年龄信息</li><li>分别读取两个孩子的姓名、年龄信息</li></ul><h5 id="2）load方法"><a href="#2）load方法" class="headerlink" title="2）load方法"></a>2）load方法</h5><p>load(stream, Loader=Loader) 解析文件流中的第一个YAML文档并生成相应的Python对象。</p><h5 id="3）代码实现"><a href="#3）代码实现" class="headerlink" title="3）代码实现"></a>3）代码实现</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">import yaml</span><br><span class="line">file=open(&#x27;runtest.yaml&#x27;,&#x27;r&#x27;)</span><br><span class="line">data=yaml.load(file)</span><br><span class="line"></span><br><span class="line">print(data)</span><br><span class="line"></span><br><span class="line">print(data[&#x27;name&#x27;])</span><br><span class="line">print(data[&#x27;age&#x27;])</span><br><span class="line"></span><br><span class="line">print(data[&#x27;spouse&#x27;])</span><br><span class="line">print(data[&#x27;spouse&#x27;][&#x27;name&#x27;])</span><br><span class="line">print(data[&#x27;spouse&#x27;][&#x27;age&#x27;])</span><br><span class="line"></span><br><span class="line">print(data[&#x27;children&#x27;])</span><br><span class="line">print(data[&#x27;children&#x27;][0][&#x27;name&#x27;])</span><br><span class="line">print(data[&#x27;children&#x27;][0][&#x27;age&#x27;])</span><br><span class="line"></span><br><span class="line">print(data[&#x27;children&#x27;][1][&#x27;name&#x27;])</span><br><span class="line">print(data[&#x27;children&#x27;][1][&#x27;age&#x27;])</span><br></pre></td></tr></table></figure><h4 id="2、数据修改"><a href="#2、数据修改" class="headerlink" title="2、数据修改"></a>2、数据修改</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">import yaml</span><br><span class="line">file=open(&#x27;runTest.yaml&#x27;,&#x27;r&#x27;)</span><br><span class="line">data=yaml.load(file)</span><br><span class="line">data[&#x27;name&#x27;]=&#x27;Test123&#x27;</span><br><span class="line">print(data[&#x27;name&#x27;])</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：此处只是变量类型的数据变更，不会真正修改到yaml配置表中的数据。</p><h4 id="3、数据转化"><a href="#3、数据转化" class="headerlink" title="3、数据转化"></a>3、数据转化</h4><p><strong>方法</strong>：dump()可以将Python对象序列化成YAML流。如果stream为None，则返回生成的字符串。</p><h5 id="1）测试场景-1"><a href="#1）测试场景-1" class="headerlink" title="1）测试场景"></a>1）测试场景</h5><p>将下面python数据类型转化为yaml数据类型</p><h5 id="2）代码实践"><a href="#2）代码实践" class="headerlink" title="2）代码实践"></a>2）代码实践</h5><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">import yaml</span><br><span class="line"></span><br><span class="line">city=[&#x27;changsha&#x27;,&#x27;wuhan&#x27;,&#x27;beijing&#x27;]</span><br><span class="line">person=&#123;&#x27;tom&#x27;:&#x27;18&#x27;&#125;</span><br><span class="line"></span><br><span class="line">#python data</span><br><span class="line">print(city)</span><br><span class="line">print(person)</span><br><span class="line">#yaml data</span><br><span class="line">print(yaml.dump(city))</span><br><span class="line">print(yaml.dump(person))</span><br></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">[&#x27;changsha&#x27;, &#x27;wuhan&#x27;, &#x27;beijing&#x27;]</span><br><span class="line">&#123;&#x27;tom&#x27;: &#x27;18&#x27;&#125;</span><br><span class="line">- changsha</span><br><span class="line">- wuhan</span><br><span class="line">- beijing</span><br><span class="line"></span><br><span class="line">tom: &#x27;18&#x27;</span><br></pre></td></tr></table></figure><h4 id="4、Capability配置数据分离"><a href="#4、Capability配置数据分离" class="headerlink" title="4、Capability配置数据分离"></a>4、Capability配置数据分离</h4><h5 id="1）测试场景-2"><a href="#1）测试场景-2" class="headerlink" title="1）测试场景"></a>1）测试场景</h5><p>将capability的各项参数值与代码进行分离。</p><h5 id="2）场景分析"><a href="#2）场景分析" class="headerlink" title="2）场景分析"></a>2）场景分析</h5><p>我们可以把之前capability中各项写死的配置信息来抽离出来，存放在一个yaml配置文件中，使用 对象数据类型来存储数据；然后调用load()方法读取数据，从而实现数据和代码的分离。</p><h5 id="3）代码实现-1"><a href="#3）代码实现-1" class="headerlink" title="3）代码实现"></a>3）代码实现</h5><p>1.参数配置表：<strong>desired_caps.yaml</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">platformName: Android</span><br><span class="line">platformVersion: 7.1.2</span><br><span class="line">deviceName: 127.0.0.1:62025</span><br><span class="line">app: D\kaoyan3.1.0.apk</span><br><span class="line">noReset: False</span><br><span class="line">appPackage: com.tal.kaoyan</span><br><span class="line">appActivity: com.tal.kaoyan.ui.activity.SplashActivity</span><br><span class="line">ip: 127.0.0.1</span><br><span class="line">port: 4723</span><br></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">from appium import webdriver</span><br><span class="line">import yaml</span><br><span class="line"></span><br><span class="line">file=open(&#x27;desired_caps.yaml&#x27;,&#x27;r&#x27;)</span><br><span class="line">data=yaml.load(file)</span><br><span class="line"></span><br><span class="line">desired_caps=&#123;&#125;</span><br><span class="line">desired_caps[&#x27;platformName&#x27;]=data[&#x27;platformName&#x27;]</span><br><span class="line">desired_caps[&#x27;platformVersion&#x27;]=data[&#x27;platformVersion&#x27;]</span><br><span class="line">desired_caps[&#x27;deviceName&#x27;]=data[&#x27;deviceName&#x27;]</span><br><span class="line"></span><br><span class="line">desired_caps[&#x27;app&#x27;]=data[&#x27;app&#x27;]</span><br><span class="line">desired_caps[&#x27;noReset&#x27;]=data[&#x27;noReset&#x27;]</span><br><span class="line"></span><br><span class="line">desired_caps[&#x27;appPackage&#x27;]=data[&#x27;appPackage&#x27;]</span><br><span class="line">desired_caps[&#x27;appActivity&#x27;]=data[&#x27;appActivity&#x27;]</span><br><span class="line"></span><br><span class="line">driver = webdriver.Remote(&#x27;http://&#x27;+str(data[&#x27;ip&#x27;])+&#x27;:&#x27;+str(data[&#x27;port&#x27;])+&#x27;/wd/hub&#x27;, desired_caps)</span><br></pre></td></tr></table></figure><h2 id="四、日职概述"><a href="#四、日职概述" class="headerlink" title="四、日职概述"></a>四、日职概述</h2><h5 id="1）日志作用"><a href="#1）日志作用" class="headerlink" title="1）日志作用"></a>1）日志作用</h5><p>不管是在项目开发还是测试过程中，项目运行一旦出现问题日志信息就非常重要了。日志是定位问题的重要手段，就像侦探人员要根据现场留下的线索来推断案情。</p><h5 id="2）日志级别"><a href="#2）日志级别" class="headerlink" title="2）日志级别"></a>2）日志级别</h5><p>脚本运行会有很多的情况，比如调试信息、报错异常信息等。日志要根据这些不同的情况来继续分级管理，不然对于排查问题的筛选会有比较大的干扰。 。日志一般定位的级别如下：</p><table><thead><tr><th><strong>级别</strong></th><th><strong>何时使用</strong></th></tr></thead><tbody><tr><td>DEBUG</td><td>调试信息，也是最详细的日志信息。</td></tr><tr><td>INFO</td><td>证明事情按预期工作。</td></tr><tr><td>WARNING</td><td>表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。</td></tr><tr><td>ERROR</td><td>由于更严重的问题，软件已不能执行一些功能了。</td></tr><tr><td>CRITICAL</td><td>严重错误，表明软件已不能继续运行了。</td></tr></tbody></table><p>首先我们日志需要按照info、debug、error等级别来进行区分的。当然这个级别可以自己去设置。在一般的情况下我们普通的输出我们直接用info类型，调试的时候用debug类型，如果预计有错误时那么我们就需要用error类型的日志，一般情况去info级别最为合适。</p><h5 id="3）日志格式"><a href="#3）日志格式" class="headerlink" title="3）日志格式"></a>3）日志格式</h5><p>日志格式化是为了提高日志的可阅读性，比如：<strong>时间+模块+行数+日志具体信息</strong> 的内容格式。如果日志信息杂乱无章的全部输出来，这样也不利于定位问题。</p><h5 id="4）日志位置"><a href="#4）日志位置" class="headerlink" title="4）日志位置"></a>4）日志位置</h5><p>一个项目中会有很多的日志采集点，而日志采集点必须结合业务属性来设置。比如在登录代码执行前可以插入“准备登录..”日志信息,如果登录完成之后，再设置登录的提示日志就会给人造成误解，无法判断到底是登录之前的问题还是登录之后的问题，因此日志采集点的位置很重要。</p><h2 id="五、logging模块"><a href="#五、logging模块" class="headerlink" title="五、logging模块"></a>五、logging模块</h2><h5 id="1）简介"><a href="#1）简介" class="headerlink" title="1）简介"></a>1）简介</h5><p>Python的logging模块提供了通用的日志系统，这个模块提供不同的日志级别，并可以采用不同的方式记录日志，比如文件，HTTP GET/POST，SMTP，Socket等，甚至可以自己实现方式记录日志。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#导入logging模块</span><br><span class="line">import logging</span><br></pre></td></tr></table></figure><h5 id="2）logging构成"><a href="#2）logging构成" class="headerlink" title="2）logging构成"></a>2）logging构成</h5><p>logging模块包括<strong>logger，Handler，Filter，Formatter</strong>四个部分。</p><ul><li>Logger 记录器，用于设置日志采集。</li><li>Handler 处理器，将日志记录发送至合适的路径。</li><li>Filter 过滤器，提供了更好的粒度控制，它可以决定输出哪些日志记录。</li><li>Formatter 格式化器，指明了最终输出中日志的格式。</li></ul><h5 id="3）Logger记录器"><a href="#3）Logger记录器" class="headerlink" title="3）Logger记录器"></a>3）Logger记录器</h5><p>Logger是一个树形层级结构，在使用接口debug，info，warn，error，critical；使用之前必须创建Logger实例，即创建一个记录器，如果没有显式的进行创建，则默认创建一个root logger，并应用默认的日志级别(WARN)，Handler和Formatter。</p><p><strong>方法</strong>：</p><p>basicConfig(参数) 为日志记录系统做基本配置。</p><p><strong>部分参数</strong></p><p><strong>filename</strong> 指定日志文件名称</p><p><strong>filemode</strong> 指定打开文件的模式，如果指定了filename（如果文件模式未指定，则默认为’a）</p><p>文件读写模式</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">w 以写方式打开，</span><br><span class="line">W 文件若存在，首先要清空，然后（重新）创建</span><br><span class="line">a 以追加模式打开 (从 EOF 开始, 必要时创建新文件)</span><br><span class="line">r+ 以读写模式打开</span><br><span class="line">w+ 以读写模式打开 (参见 w )</span><br><span class="line">a+ 以读写模式打开 (参见 a )</span><br></pre></td></tr></table></figure><p><strong>format</strong> 为处理程序使用指定的格式字符串。</p><p><strong>datefmt</strong> 使用指定的日期/时间格式。样式如果指定了格式字符串，则使用它来指定 格式字符串的类型.</p><p><strong>level</strong> 将根记录器级别设置为指定级别。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(level=logging.DEBUG)</span><br><span class="line">logging.basicConfig(level=logging.INFO)</span><br><span class="line">logging.debug(&#x27;debug info&#x27;)</span><br><span class="line">logging.info(&#x27;hello tom！&#x27;)</span><br><span class="line">logging.warning(&#x27;warning info&#x27;)</span><br><span class="line">logging.error(&#x27;error info&#x27;)</span><br><span class="line">logging.critical(&#x27;critical info&#x27;)</span><br></pre></td></tr></table></figure><h5 id="4）Handler处理器"><a href="#4）Handler处理器" class="headerlink" title="4）Handler处理器"></a>4）Handler处理器</h5><p>Handler 处理器，将日志记录发送至合适的路径,Handler处理器类型有很多种，比较常用的有三个：</p><p><strong>1°StreamHandler</strong></p><p>将日志记录输出发送到诸如sys.stdout，sys.stderr或任何类似文件流的对象。</p><p><strong>2°FileHandler</strong></p><p>将日志记录输出发送到磁盘文件。 它继承了StreamHandler的输出功能。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">logging.basicConfig(filename=&#x27;runlog.log&#x27;,level=logging.DEBUG)</span><br></pre></td></tr></table></figure><p><strong>3°NullHandler</strong></p><p>不做任何格式化或输出。 它本质上是一个开发人员使用的“无操作”处理程序。</p><p><strong>4°Formatter</strong></p><p>使用Formatter对象设置日志信息最后的规则、结构和内容，默认的时间格式为:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%Y-%m-%d %H:%M:%S</span><br></pre></td></tr></table></figure><table><thead><tr><th><strong>格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名称</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程id</td></tr><tr><td>%(threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr></tbody></table><p>使用方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">import logging</span><br><span class="line">logging.basicConfig(filename=&#x27;runlog.log&#x27;,level=logging.DEBUG,</span><br><span class="line">format=&#x27;%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#x27;)</span><br><span class="line">logging.debug(&#x27;debug info&#x27;)</span><br><span class="line">logging.info(&#x27;hello tom！&#x27;)</span><br><span class="line">logging.warning(&#x27;warning info&#x27;)</span><br><span class="line">logging.error(&#x27;error info&#x27;)</span><br><span class="line">logging.critical(&#x27;critical info&#x27;)</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2021-09-02 11:50:20,094 ��־.py[line:5] DEBUG debug info</span><br><span class="line">2021-09-02 11:50:41,359 ��־.py[line:5] DEBUG debug info</span><br><span class="line">2021-09-02 11:50:41,360 ��־.py[line:6] INFO hello tom��</span><br><span class="line">2021-09-02 11:50:41,360 ��־.py[line:7] WARNING warning info</span><br><span class="line">2021-09-02 11:50:41,360 ��־.py[line:8] ERROR error info</span><br><span class="line">2021-09-02 11:50:41,360 ��־.py[line:9] CRITICAL critical info</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>韶光抚月 天下人间</title>
    <link href="/2021/09/01/%E9%9F%B6%E5%85%89%E6%8A%9A%E6%9C%88-%E5%A4%A9%E4%B8%8B%E4%BA%BA%E9%97%B4/"/>
    <url>/2021/09/01/%E9%9F%B6%E5%85%89%E6%8A%9A%E6%9C%88-%E5%A4%A9%E4%B8%8B%E4%BA%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h4 id="原来你也？？"><a href="#原来你也？？" class="headerlink" title="原来你也？？"></a>原来你也<a href="https://ys.mihoyo.com/">？？</a></h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>appium</title>
    <link href="/2021/09/01/appium/"/>
    <url>/2021/09/01/appium/</url>
    
    <content type="html"><![CDATA[<h4 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h4><h5 id="一、元素定位方式（8种）"><a href="#一、元素定位方式（8种）" class="headerlink" title="一、元素定位方式（8种）"></a>一、元素定位方式（8种）</h5><p>\1) id定位</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"> find_element_by_id()</span><br></pre></td></tr></table></figure><p>\2) name</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_name(&#x27;请输入用户名&#x27;).send_keys(&#x27;&#x27;)</span><br></pre></td></tr></table></figure><p>\3) class</p><p>​        classname定位是根据元素类型来进行定位，但是实际情况中很多元素的classname都是相同的，如上例中登录页面中的用户名和密码都是className属性值都是：<strong>“android.widget.EditText”</strong> 因此只能定位第一个元素也就是用户名，而密码输入框就需要使用其他方式来定位，这样其实很鸡肋.一般情况下如果有id就不必使用classname定位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_class_name(&#x27;android.widget.EditText&#x27;).send_keys(&#x27;xxx&#x27;)</span><br><span class="line">driver.find_element_by_class_name(&#x27;android.widget.Button&#x27;).click()</span><br></pre></td></tr></table></figure><p>\4) List定位</p><p>​        List定位首先是使用”<strong>find_elements_by_XX</strong>“获取一组相同的class属性的元素，然后使用数组下标来区分标记不同元素进行相关操作。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_register_text&#x27;).click()</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_userheader&#x27;).click()</span><br><span class="line"></span><br><span class="line">images=driver.find_elements_by_id(&#x27;com.tal.kaoyan:id/item_image&#x27;)</span><br><span class="line"></span><br><span class="line">images[2].click()</span><br><span class="line"></span><br><span class="line">driver.find_element_by_id(&#x27;com.tal.kaoyan:id/save&#x27;).click()</span><br></pre></td></tr></table></figure><p>\5) 相对定位</p><p>​        先找到该元素的对应属性的父节点，然后基于父节点进行元素定位。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_id(&#x27;com.tal.kaoyan:id/login_register_text&#x27;).click()</span><br><span class="line">root_element=driver.find_element_by_id(&#x27;com.tal.kaoyan:id/activity_register_parentlayout&#x27;)</span><br><span class="line">root_element.find_element_by_class_name(&#x27;android.widget.ImageView&#x27;).click()</span><br></pre></td></tr></table></figure><p>\6) xpath定位</p><p>​        xpath定位是一种路径定位方式，主要是依赖于元素绝对路径或者相关属性来定位，但是绝对路径xpath执行效率比较低（特别是元素路径比较深的时候），一般使用比较少。通常使用xpath相对路径和属性定位。</p><ul><li>‘<strong>/</strong>‘:从根节点选取</li><li>‘<strong>//</strong>‘:从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</li><li>‘<strong>nodename</strong>‘:选取此节点的所有子节点</li><li>‘<strong>·</strong>‘：选取当前节点</li><li>‘<strong>··</strong>‘：选取当前节点的父节点</li><li>‘<strong>@</strong>‘:选取属性</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">driver.find_element_by_xpath(&#x27;//android.widget.EditText[@text=&quot;请输入用户名&quot;]&#x27;).send_keys(&#x27;xxx&#x27;)</span><br><span class="line">driver.find_element_by_xpath(&#x27;//*[@class=&quot;android.widget.EditText&quot; and @index=&quot;3&quot;]&#x27;).send_keys(&#x27;xxx&#x27;)</span><br><span class="line">driver.find_element_by_xpath(&#x27;//android.widget.Button&#x27;).click()</span><br></pre></td></tr></table></figure><p>\7) H5页面元素定位</p><p>\8) Uiautomator定位</p><h5 id="EXTRA"><a href="#EXTRA" class="headerlink" title="EXTRA"></a><strong>EXTRA</strong></h5><p>滑动效果：</p><p>swipe()方法的参数说明：<br>start_x：起始横坐标<br>start_y：起始纵坐标<br>end_x：结束时横坐标<br>end_y：结束时纵坐标<br>duration：滑动持续时间，单位毫秒，默认None（一般设置500-1000毫秒比较合适）</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">:Args:</span><br><span class="line">         - start_x - x-coordinate at which to start</span><br><span class="line">         - start_y - y-coordinate at which to start</span><br><span class="line">         - end_x - x-coordinate at which to stop</span><br><span class="line">         - end_y - y-coordinate at which to stop</span><br><span class="line">         - duration - (optional) time to take the swipe, in ms.</span><br><span class="line"></span><br><span class="line">        :Usage:</span><br><span class="line">            driver.swipe(100, 100, 100, 400)</span><br></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello handsome boy</title>
    <link href="/2021/09/01/hello-world/"/>
    <url>/2021/09/01/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to my blog with a handsome boy! It is your pleasure. Then start your browsing!However,you can also leave a message under <a href="https://user.qzone.qq.com/550531980">my qq</a></p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>MonkeyRunner API</title>
    <link href="/2021/08/31/MonkeyRunner-API/"/>
    <url>/2021/08/31/MonkeyRunner-API/</url>
    
    <content type="html"><![CDATA[<p>MonkeyRunner工具主要有三个类：</p><p>1）MonkeyRunner</p><p>2）MonkeyDevice</p><p>3）MonkeyImage</p><p>​    <a href="http://www.android-doc.com/tools/help/monkeyrunner_concepts.html#">官方API文档 </a></p><h1 id="1-MonkeyRunner-类："><a href="#1-MonkeyRunner-类：" class="headerlink" title="1.MonkeyRunner 类："></a>1.MonkeyRunner 类：</h1><p>MonkeyRunner提供连接真机和模拟器、输入、暂停、警告框等方法</p><table><thead><tr><th>alert()</th><th>警告框</th></tr></thead><tbody><tr><td><strong>choice()</strong></td><td><strong>选项列表框</strong></td></tr><tr><td><strong>help()</strong></td><td><strong>API帮助文档</strong></td></tr><tr><td><strong>input()</strong></td><td><strong>输入</strong></td></tr><tr><td><strong>sleep()</strong></td><td><strong>暂停</strong></td></tr><tr><td><strong>waitForConnection()</strong></td><td><strong>等待设备连接</strong></td></tr></tbody></table><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><strong>常用方法</strong></h5><p><strong>waitForConnection(float timeout,string deviceid)，</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> com.android.monkeyrunner import MonkeyRunner as mr<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;connect devices...&quot;</span>)<br><br><span class="hljs-attribute">device</span>=mr.waitForConnection()<br><span class="hljs-comment"># device=mr.waitForConnection(5,&#x27;127.0.0.1:62001&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="2-MonkeyDevices类"><a href="#2-MonkeyDevices类" class="headerlink" title="2.MonkeyDevices类"></a>2.MonkeyDevices类</h1><p>MonkeyDevice类提供了安装和卸载程序包、开启Activity、发送按键和点击事件、运行测试包等方法。</p><table><thead><tr><th>broadcastInternt()</th><th>发送广播</th></tr></thead><tbody><tr><td><strong>drag()</strong></td><td><strong>拖动</strong></td></tr><tr><td><strong>getProperty()</strong></td><td><strong>获取当前设备属性</strong></td></tr><tr><td><strong>getSystemProperty()</strong></td><td><strong>获取当前设备属性</strong></td></tr><tr><td><strong>installPackage()</strong></td><td><strong>安装应用</strong></td></tr><tr><td><strong>instrument()</strong></td><td><strong>执行测试用例</strong></td></tr><tr><td><strong>press()</strong></td><td><strong>按键</strong></td></tr><tr><td><strong>reboot()</strong></td><td><strong>重启</strong></td></tr><tr><td><strong>removePackage()</strong></td><td><strong>删除指定Package</strong></td></tr><tr><td><strong>shell()</strong></td><td><strong>执行命令</strong></td></tr><tr><td><strong>startActivity()</strong></td><td><strong>启动应用</strong></td></tr><tr><td><strong>touch()</strong></td><td><strong>点击</strong></td></tr></tbody></table><p><strong>常用方法</strong></p><ul><li><strong>installPackage (string path)</strong></li><li><strong>removePackage (string package)</strong></li><li><strong>startActivity (string uri, string action, string data, string mimetype, iterable categories dictionary extras, component component, flags)</strong></li><li><strong>touch (integer x, integer y, integer type)</strong></li></ul><p><strong>touch参数说明</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">integer</span> x，x坐标值。<br><span class="hljs-type">integer</span> y，y坐标值。<br><span class="hljs-type">integer</span> <span class="hljs-keyword">type</span>，key event类型（如DOWN、UP、DOWN_AND_UP）。<br><br>DOWN为按下事件 UP为弹起事件 DOWN_AND_UP为按下弹起事件。<br><br>drag (tuple <span class="hljs-keyword">start</span>, tuple <span class="hljs-keyword">end</span>, <span class="hljs-type">float</span> duration, <span class="hljs-type">integer</span> steps)<br></code></pre></td></tr></table></figure><p><strong>drag参数详细说明如下：</strong></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">tuple</span> start，拖拽起始位置，为<span class="hljs-keyword">tuple</span>类型的(x,y)坐标点。<br><span class="hljs-keyword">tuple</span> <span class="hljs-keyword">end</span>，拖拽终点位置，为<span class="hljs-keyword">tuple</span>类型的(x,y)坐标点。<br><span class="hljs-built_in">float</span> duration，拖拽手势持续时间，默认为<span class="hljs-number">1</span>.<span class="hljs-number">0</span>s。<br>-integer steps，插值点的步数，默认值为<span class="hljs-number">10</span>。<br></code></pre></td></tr></table></figure><h5 id="实践案例："><a href="#实践案例：" class="headerlink" title="实践案例："></a><strong>实践案例：</strong></h5><p>连接设备，安装考研帮App并启动</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyRunner <span class="hljs-keyword">as</span> mr<br><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyDevice <span class="hljs-keyword">as</span> md<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;connect devices...&quot;</span>)<br>device=mr.waitForConnection()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;install app...&quot;</span>)<br>device.installPackage(<span class="hljs-string">r&#x27;C:\Users\admin\Desktop\kaoyan3.1.0.apk&#x27;</span>)<br><br>package = <span class="hljs-string">&#x27;com.tal.kaoyan&#x27;</span><br>activity = <span class="hljs-string">&#x27;com.tal.kaoyan.ui.activity.SplashActivity&#x27;</span><br>runComponent = package + <span class="hljs-string">&#x27;/&#x27;</span> + activity<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;launch App...&quot;</span>)<br>device.startActivity(component=runComponent)<br>代码执行方式<br>monkeyrunner scripfile<br><br>C:\Users\admin&gt;monkeyrunner E:\monkeyrunner_script\kyb.py<br></code></pre></td></tr></table></figure><h1 id="3-MonkeyImage类"><a href="#3-MonkeyImage类" class="headerlink" title="3.MonkeyImage类"></a>3.MonkeyImage类</h1><p>MonkeyImage类在测试过程中用来保存各种格式的测试截图，并可以进行图像对比。</p><table><thead><tr><th><strong>convertToBytes()</strong></th><th><strong>转换图像格式</strong></th></tr></thead><tbody><tr><td><strong>getRawPixel()</strong></td><td><strong>获取当前坐标像素元组</strong></td></tr><tr><td><strong>getRawPixelint()</strong></td><td><strong>获取当前坐标像素元组</strong></td></tr><tr><td><strong>sameAs()</strong></td><td><strong>图像对比</strong></td></tr><tr><td><strong>writeToFile()</strong></td><td><strong>保存图像文件</strong></td></tr><tr><td><strong>getSubimage()</strong></td><td><strong>截取子图像</strong></td></tr></tbody></table><p><strong>常用方法</strong></p><ul><li><p>takeSnapshot() 进行屏幕截图</p></li><li><p>writeToFile() 保存图像文件到指定的文件路径</p></li></ul><p> <strong>用法示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyImage <span class="hljs-keyword">as</span> mi  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;takeSnapshot&quot;</span>)<br>screenshot=device.takeSnapshot()  <br>screenshot.writeToFile(<span class="hljs-string">r&#x27;E:\monkeyrunner_script\test.png&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>) <br></code></pre></td></tr></table></figure><h1 id="综合实践"><a href="#综合实践" class="headerlink" title="综合实践"></a>综合实践</h1><h2 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h2><ul><li><p>连接设备，自动安装并启动考研帮app</p></li><li><p>启动后登录账号，然后截图并保存到指定文件位置。</p></li></ul><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ul><li><p>连接设备</p></li><li><p>安装app</p></li><li><p>启动app</p></li><li><p>输入用户名密码点击登录按钮</p></li><li><p>截图</p></li></ul><h2 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h2><p><strong>kyb_login.py</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.monkeyrunner</span> import MonkeyRunner as mr<br>from com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.monkeyrunner</span> import MonkeyDevice as md<br>from com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.monkeyrunner</span> import MonkeyImage as mi<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;connect devices...&quot;</span>)</span></span><br><br>device=mr<span class="hljs-selector-class">.waitForConnection</span>()<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot; install app&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.installPackage</span>(r<span class="hljs-string">&#x27;C:\Users\admin\Desktop\kaoyan3.1.0.apk&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;launch app...&quot;</span>)</span></span><br>package=<span class="hljs-string">&#x27;com.tal.kaoyan&#x27;</span><br>activity=<span class="hljs-string">&#x27;com.tal.kaoyan.ui.activity.SplashActivity&#x27;</span><br>runComponent=package+<span class="hljs-string">&#x27;/&#x27;</span>+activity<br><br>device<span class="hljs-selector-class">.startActivity</span>(component=runComponent)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">3</span>)<br><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;touch cancel button&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">618</span>,<span class="hljs-number">895</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;touch skip button&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">804</span>,<span class="hljs-number">67</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;input username and password&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">57</span>,<span class="hljs-number">373</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">2</span>)<br>device<span class="hljs-selector-class">.type</span>(账户)<br><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">152</span>,<span class="hljs-number">480</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">2</span>)<br>device<span class="hljs-selector-class">.type</span>(密码)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;touch login button&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">331</span>,<span class="hljs-number">634</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;takeSnapshot&quot;</span>)</span></span><br>screenshot=device<span class="hljs-selector-class">.takeSnapshot</span>()<br>screenshot<span class="hljs-selector-class">.writeToFile</span>(r<span class="hljs-string">&#x27;D:\monkeyrunner\kyb.png&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>方法调用错误</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">AttributeError: <span class="hljs-keyword">type</span> <span class="hljs-keyword">object</span> <span class="hljs-string">&#x27;com.android.monkeyrunner.XXXXX&#x27;</span> has <span class="hljs-keyword">no</span> <span class="hljs-keyword">attribute</span> XXXXXX<br></code></pre></td></tr></table></figure><p>检查调用的方法名是否写错，特别是注意区分大小写。</p><p>字符编码错误</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">SyntaxError: Non-ASCII <span class="hljs-type">character</span> <span class="hljs-keyword">in</span> file <span class="hljs-string">&#x27;E:\monkeyrunner_script\kyb.py&#x27;</span>, but <span class="hljs-keyword">no</span> <span class="hljs-keyword">encoding</span> declared;<br></code></pre></td></tr></table></figure><p>需要在代码顶部补充 # **- coding: utf-8 -**或者去掉代码中的中文字符</p>]]></content>
    
    
    
    <tags>
      
      <tag>Monkeyrunner</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
