<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>requests</title>
    <link href="/2021/09/10/requests/"/>
    <url>/2021/09/10/requests/</url>
    
    <content type="html"><![CDATA[<h4 id="基于天气api进行测试"><a href="#基于天气api进行测试" class="headerlink" title="基于天气api进行测试"></a>基于天气api进行测试</h4><h5 id="1、测试的案例"><a href="#1、测试的案例" class="headerlink" title="1、测试的案例"></a>1、测试的案例</h5><p>测试的API：天气API</p><p>接口URL：<a href="http://wthrcdn.etouch.cn/weather_mini?city=%E5%8C%97%E4%BA%AC">http://wthrcdn.etouch.cn/weather_mini?city=%E5%8C%97%E4%BA%AC</a></p><p>请求方式：GET</p><p>参数：city 为城市名称，支持的城市可以带上市、县、区之类的，如：北京、长沙等等。</p><h5 id="2、测试的场景"><a href="#2、测试的场景" class="headerlink" title="2、测试的场景"></a>2、测试的场景</h5><p>通过接口来查询<strong>北京</strong>的天气信息</p><p><strong>注意：</strong></p><ul><li>每个 IP 日调用额度 2000 次，超过过多，会直接封掉 IP 段。 </li><li>每次请求间隔必须 3 秒一次，如果多次超过 3 秒内调用多次，会封掉 IP 段</li><li>不要频繁调用</li></ul><h5 id="3、代码实现"><a href="#3、代码实现" class="headerlink" title="3、代码实现"></a>3、代码实现</h5><p><strong>test_unit.py</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> unittest<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> parse<br><span class="hljs-keyword">from</span> time <span class="hljs-keyword">import</span> sleep<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">WeatherTest</span>(<span class="hljs-params">unittest.TestCase</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">setUp</span>(<span class="hljs-params">self</span>):</span><br>        self.url = <span class="hljs-string">&#x27;http://wthrcdn.etouch.cn/weather_mini?city=%E5%8C%97%E4%BA%AC&#x27;</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_weather_beijing</span>(<span class="hljs-params">self</span>):</span><br>        data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;北京&#x27;</span>&#125;<br>        city = parse.urlencode(data).encode(<span class="hljs-string">&#x27;utf-8&#x27;</span>)<br><br>        r = requests.get(self.url, params=city)<br>        result = r.json()<br>        <span class="hljs-comment"># print(result)</span><br>        <span class="hljs-comment"># 断言</span><br>        self.assertEqual(result[<span class="hljs-string">&#x27;status&#x27;</span>], <span class="hljs-number">1000</span>)<br>        self.assertEqual(result[<span class="hljs-string">&#x27;desc&#x27;</span>], <span class="hljs-string">&#x27;OK&#x27;</span>)<br>        self.assertEqual(result[<span class="hljs-string">&#x27;data&#x27;</span>][<span class="hljs-string">&#x27;city&#x27;</span>], <span class="hljs-string">&#x27;北京&#x27;</span>)<br>        sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_weather_param_error</span>(<span class="hljs-params">self</span>):</span><br>        data = &#123;<span class="hljs-string">&#x27;city&#x27;</span>: <span class="hljs-string">&#x27;666&#x27;</span>&#125;<br><br>        r = requests.get(self.url, params=data)<br>        result = r.json()<br>        <span class="hljs-comment"># print(result)</span><br>        self.assertEqual(result[<span class="hljs-string">&#x27;desc&#x27;</span>], <span class="hljs-string">&#x27;OK&#x27;</span>)<br>        self.assertEqual(result[<span class="hljs-string">&#x27;status&#x27;</span>], <span class="hljs-number">1000</span>)<br>        sleep(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_weather_no_param</span>(<span class="hljs-params">self</span>):</span><br>        r = requests.get(self.url)<br>        result = r.json()<br><br>        self.assertEqual(result[<span class="hljs-string">&#x27;status&#x27;</span>],<span class="hljs-number">1000</span>)<br>        self.assertEqual(result[<span class="hljs-string">&#x27;desc&#x27;</span>], <span class="hljs-string">&#x27;OK&#x27;</span>)<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    unittest.main()<br><br></code></pre></td></tr></table></figure><p><strong>run.py</strong></p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><code class="hljs css">import unittest<br><span class="hljs-selector-tag">from</span> BSTestRunner import BSTestRunner<br>import <span class="hljs-selector-tag">time</span><br>import logging<br>import smtplib  # 发送邮件模块<br><span class="hljs-selector-tag">from</span> email<span class="hljs-selector-class">.mime</span><span class="hljs-selector-class">.text</span> import MIMEText  # 定义邮件内容<br><span class="hljs-selector-tag">from</span> email<span class="hljs-selector-class">.header</span> import <span class="hljs-selector-tag">Header</span>  # 定义邮件标题<br>import os  # 读取报表<br><br><br>def send_mail(latest_report):<br>    f = <span class="hljs-built_in">open</span>(latest_report, <span class="hljs-string">&#x27;rb&#x27;</span>)<br>    mail_content = f.<span class="hljs-built_in">read</span>()<br>    f.<span class="hljs-built_in">close</span>()<br><br>    smtpserver = <span class="hljs-string">&#x27;smtp.163.com&#x27;</span><br><br>    user = <span class="hljs-string">&#x27;&#x27;</span>  # 用户名<br>    password = <span class="hljs-string">&#x27;AOQCGDZDSEJCNGUB&#x27;</span>  # 授权码<br><br>    sender = <span class="hljs-string">&#x27;&#x27;</span>  # 发件人邮箱<br>    receive = <span class="hljs-string">&#x27;&#x27;</span>  # 收件人邮箱<br><br>    subject = <span class="hljs-string">&#x27;requests测试报告&#x27;</span><br><br>    msg = <span class="hljs-built_in">MIMEText</span>(mail_content, <span class="hljs-string">&#x27;html&#x27;</span>, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    msg[<span class="hljs-string">&#x27;Subject&#x27;</span>] = <span class="hljs-built_in">Header</span>(subject, <span class="hljs-string">&#x27;utf-8&#x27;</span>)<br>    msg[<span class="hljs-string">&#x27;From&#x27;</span>] = sender<br>    msg[<span class="hljs-string">&#x27;To&#x27;</span>] = <span class="hljs-string">&#x27;,&#x27;</span>.<span class="hljs-built_in">join</span>(receive)<br><br>    smtp = smtplib.<span class="hljs-built_in">SMTP_SSL</span>(smtpserver, <span class="hljs-number">465</span>)<br>    smtp.<span class="hljs-built_in">helo</span>(smtpserver)<br>    smtp.<span class="hljs-built_in">ehlo</span>(smtpserver)<br>    smtp.<span class="hljs-built_in">login</span>(user, password)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Start send Email...&quot;</span>)<br>    smtp.<span class="hljs-built_in">sendmail</span>(sender, receive, msg.<span class="hljs-built_in">as_string</span>())<br>    smtp.<span class="hljs-built_in">quit</span>()<br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Send Email end!&quot;</span>)<br><br><br>def <span class="hljs-built_in">latest_report</span>(report_dir):<br>    lists = os.<span class="hljs-built_in">listdir</span>(report_dir)<br><br>    lists.<span class="hljs-built_in">sort</span>(key=lambda fn: os.path.<span class="hljs-built_in">getatime</span>(report_dir + <span class="hljs-string">&#x27;\\&#x27;</span> + fn))<br>    <span class="hljs-built_in">print</span>((<span class="hljs-string">&quot;new report is :&quot;</span> + lists[-<span class="hljs-number">1</span>]))<br><br>    file = os.path.<span class="hljs-built_in">join</span>(report_dir, lists[-<span class="hljs-number">1</span>])<br>    <span class="hljs-built_in">print</span>(file)<br>    return file<br><br><br>if __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br><br>    test_dir = <span class="hljs-string">&#x27;test_case&#x27;</span><br>    report_dir = <span class="hljs-string">&#x27;reports&#x27;</span><br><br>    discover = unittest.defaultTestLoader.<span class="hljs-built_in">discover</span>(test_dir, pattern=<span class="hljs-string">&#x27;test*.py&#x27;</span>)<br><br>    now = time.<span class="hljs-built_in">strftime</span>(<span class="hljs-string">&#x27;%Y-%m-%d %H_%M_%S&#x27;</span>)<br>    report_name = report_dir + <span class="hljs-string">&#x27;/&#x27;</span> + now + <span class="hljs-string">&#x27; test_report.html&#x27;</span><br><br>    with <span class="hljs-built_in">open</span>(report_name, <span class="hljs-string">&#x27;wb&#x27;</span>) as f:<br>        runner = <span class="hljs-built_in">BSTestRunner</span>(stream=f, title=<span class="hljs-string">&#x27;Requests Test Report&#x27;</span>, description=<span class="hljs-string">&#x27;Requests test report&#x27;</span>)<br>        logging.<span class="hljs-built_in">info</span>(<span class="hljs-string">&#x27;start run test case...&#x27;</span>)<br>        runner.<span class="hljs-built_in">run</span>(discover)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;find latest report&quot;</span>)<br>    latest_report = <span class="hljs-built_in">latest_report</span>(report_dir)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;send email report..&quot;</span>)<br>    <span class="hljs-built_in">send_mail</span>(latest_report)<br><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;Test end&quot;</span>)<br><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>关于requests测试用例</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Fiddler</title>
    <link href="/2021/09/09/Fiddler/"/>
    <url>/2021/09/09/Fiddler/</url>
    
    <content type="html"><![CDATA[<h4 id="一、Fiddler下载安装"><a href="#一、Fiddler下载安装" class="headerlink" title="一、Fiddler下载安装"></a>一、Fiddler下载安装</h4><p>下载地址：<a href="https://www.telerik.com/download/fiddler">Fiddler</a></p><h4 id="二、Fiddler工作原理"><a href="#二、Fiddler工作原理" class="headerlink" title="二、Fiddler工作原理"></a>二、Fiddler工作原理</h4><p><img src="https://pic.imgdb.cn/item/6139a73044eaada739973684.jpg"></p><p><strong>工作原理：</strong>Fiddler 作为一个代理，先是捕捉到客户端的 request 请求，然后再自己转发到服务 </p><p>器端，服务器接收到请求时，会返回一个响应 response ，Fiddler 还是会继续捕捉到服 </p><p>务器的响应请求，再来转发给客户端，简单来说， Fiddler 就是作为一个中间人。</p><p><strong>优缺点：</strong>只支持http、https、ftp、websocket数据流等相关写的的捕捉，无法监测或修改其他数据流，如 SMTP、POP3 协议(邮箱相关的协议)，无法处理请求和响应超过 2GB 的数 据，还有就是只支持 windows 平台，如果想要支持 mac 的话，建议下载 charles ，不 过很吃性能。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>接口测试</title>
    <link href="/2021/09/09/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/"/>
    <url>/2021/09/09/%E6%8E%A5%E5%8F%A3%E6%B5%8B%E8%AF%95/</url>
    
    <content type="html"><![CDATA[<h2 id="一、接口测试"><a href="#一、接口测试" class="headerlink" title="一、接口测试"></a>一、接口测试</h2><h3 id="1、接口可以分为下面几种："><a href="#1、接口可以分为下面几种：" class="headerlink" title="1、接口可以分为下面几种："></a>1、接口可以分为下面几种：</h3><h4 id="（1）系统与系统之间的调用"><a href="#（1）系统与系统之间的调用" class="headerlink" title="（1）系统与系统之间的调用"></a>（1）系统与系统之间的调用</h4><p>​        比如银行会提供接口供电子商务网站调用，或者说，支付宝会提供接口给淘调用。</p><h4 id="（2）上层服务对下层服务的调用"><a href="#（2）上层服务对下层服务的调用" class="headerlink" title="（2）上层服务对下层服务的调用"></a>（2）上层服务对下层服务的调用</h4><p>​        比如service层会调用DAO层的接口，而应用层又会调用服务层提供的接口，一般会通过。</p><h4 id="（3）服务之间的调用"><a href="#（3）服务之间的调用" class="headerlink" title="（3）服务之间的调用"></a>（3）服务之间的调用</h4><p>​        比如注册用户时，会先调用用户查询的服务，查看该用户是否已经注册。而我们所要做的接口测试，先要了解是基于哪一种类型的接口测试，不同类型的接口测试方法可能是不一致的，总体来说，不管是那种类型，我们只要把被测接口当做是服务方，而把我们的测试手段当做是客户方，我们的目的就是，通过我们的测试手段，去验证服务端满足了他声明提供的功能。</p><h3 id="2、具体的测试方法"><a href="#2、具体的测试方法" class="headerlink" title="2、具体的测试方法"></a>2、具体的测试方法</h3><p>​        至于说到具体的测试方法，http协议的接口测试，一般会用jmeter去测试，jmeter的好处是不用写测试代码，直接使用jmeter提供的http请求去测试，也可以使用HTTPClient去测试，好处是可以方便集成和自动化。java接口的测试，则需要编写测试代码去测试，有点类似于单元测试，但是需要更多的考虑业务场景。</p><h2 id="二、接口测试的流程"><a href="#二、接口测试的流程" class="headerlink" title="二、接口测试的流程"></a>二、接口测试的流程</h2><pre><code>     1、接口测试的流程其实和功能测试的流程类似，因为接口测试依赖的主要对象也是需求说明书，所以，最初的流程就是参与需求讨论，评审需求。</code></pre><p>​        2、需求确定以后，开发会根据需求进行接口设计，会产出接口定义，在开发设计过程中，有能力的话，可以给出一些针对设计的建议，提高可测性，针对需求及设计，进行测试计划，测试设计，然后还需要和配管确定测试环境相关的事情。</p><p>　　3、在开发完成接口定义之后，就根据需求文档及接口定义进行测试用例设计，测试用例设计主要从业务场景，功能，以及异常测试几个方面考虑。</p><p>　　4、测试用例设计完成后，针对测试用例进行评审，然后，如果开发代码部分可测时，即可进入测试了，因为是部分可测，可能会使用到mock方法。</p><p>​        5、已有测试代码时，就要进行测试代码的持续集成了，我们是使用hudson来进行持续集成的在项目结束后，会对每个项目进行总结</p><h2 id="三、接口测试的数据准备"><a href="#三、接口测试的数据准备" class="headerlink" title="三、接口测试的数据准备"></a>三、接口测试的数据准备</h2><p>接口测试的数据准备，可以从下面几个方面去考虑：</p><p>​        1、如果是只测试一次的接口，可以使用硬编码的方式准备测试数据，在写测试代码的时候，使用到什么数据就写什么数据，为了避免数据重复，可能比较多的会用到随机字符或随机数</p><p>　　2、可以直接通过调用其他API的方式准备测试数据，这种情况在测试最上层服务的时候比较有用，比如测试团购购买服务，就需要准备要购买的团购数据，购买团购的用户数据，这个时候，可以直接调用生产团购的api和生成用户的api直接生成测试数据</p><pre><code>     3、使用excel或xml准备测试数据，这种准备测试数据的方式，主要针对对象数据的准备，比如可以将一条团购数据对应excel中的一条数据，因为一般开发都会使用pojo映射，而在准备测试数据的时候，这些pojo对象属性的设置往往是重复和大工作量的，用excel或XML方式准备，则可以减少在代码当中重复去准备这些数据。</code></pre><p>​        4、也可以使用工具方法的形式去准备测试数据，通过在代码中写工具方法去实现数据生成，而在测试代码中调用工具方法去得到所需数据。</p><h2 id="四、测试用例"><a href="#四、测试用例" class="headerlink" title="四、测试用例"></a>四、测试用例</h2><p>​        接口测试用例的设计方法其实和功能测试用例的设计方法是类似的，因为接口是需要满足需求的，而接口测试所依赖的也是需求说明书，但是，因为接口测试毕竟是通过代码去测试代码，所以，为了保证覆盖率，可能会使用到单元测试的方法，具体的测试用例设计如下：输入参数测试：</p><p>​        1、针对输入的参数进行测试，也可以说是假定接口参数的不正确性进行的测试，确保接口对任意类型的输入都做了相应的处理：输入参数合法，输入参数不合法，输入参数为空，输入参数为null，输入参数超长；</p><p>　　2、功能测试：接口是否满足了所提供的功能，相当于是正常情况测试，如果一个接口功能复杂时推荐对接口用例进行结构划分，这样子用例具有更好的可读性和维护性；</p><p>　　3、逻辑测试：逻辑测试严格讲应为单元测试，单元测试应保持内部逻辑的正确性，可单元测试和接口测试界限并不是那么清楚，所以我们也可以从给出的设计文档中考虑内部逻辑错误的分支情况和异常；</p><p>​        4、异常情况测试：接口实现是否对异常情况都进行了处理，接口输入参数虽然合法，但是在接口实现中，也会出现异常，因为内部的异常不一定是输入的数据造成的，而有可能是其他逻辑造成的，程序需要对任何的异常都进行处理。</p><h2 id="五、接口测试、单元测试、白盒测试的区别"><a href="#五、接口测试、单元测试、白盒测试的区别" class="headerlink" title="五、接口测试、单元测试、白盒测试的区别"></a>五、接口测试、单元测试、白盒测试的区别</h2><p>​        单元测试是针对具体的代码逻辑进行测试，主要测试被测代码的一个很小的、很明确的功能是否正确。通常而言，一个单元测试是用于判断某个特定条件（或者场景）下某个特定函数的行为。例如，你可能把一个很大的值放入一个有序list 中去，然后确认该值出现在list 的尾部。或者，你可能会从字符串中删除匹配某种模式的字符，然后确认字符串确实不再包含这些字符了。尽量减少这些功能单元集成起来出错的可能性，单元测试一般是由开发人员自己去完成，单元测试可能不会考虑业务是如何的，会更多的考虑，我这个单元模块逻辑是否正确。</p><p>　　接口测试指的是针对程序内部的或者外部的接口进行的测试，一个接口方法可能会包含多个单元模块，而且，一个接口会有自己特定的业务定义，所以，做接口测试的时候，更多的需要从业务的角度去考虑如何测试这个接口。</p><p>　　不管是接口测试还是单元测试，其实都属于白盒测试的一个阶段，白盒测试具体的方法有很多种，比如代码审查，比如代码覆盖。</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>postman工具</title>
    <link href="/2021/09/08/postman%E5%B7%A5%E5%85%B7/"/>
    <url>/2021/09/08/postman%E5%B7%A5%E5%85%B7/</url>
    
    <content type="html"><![CDATA[<h2 id="一、postman的概述"><a href="#一、postman的概述" class="headerlink" title="一、postman的概述"></a>一、postman的概述</h2><h3 id="1、为什么使用postman？"><a href="#1、为什么使用postman？" class="headerlink" title="1、为什么使用postman？"></a>1、为什么使用postman？</h3><p>​        一般简单的接口测试我们可以直接在浏览器里面进行调试，但是涉及到一些权限设置的就无法操作了，因此我们需要接口测试的相关工具，Postman 是一个接口测试和 http请求的工具。</p><h3 id="2、postman的下载和安装"><a href="#2、postman的下载和安装" class="headerlink" title="2、postman的下载和安装"></a>2、postman的下载和安装</h3><p>​        <a href="https://dl.pstmn.io/download/latest/win64">postman</a>有Windows、Mac、Linux以及Chrome插件版本，这里主要介绍Win平台软件版本的使用。</p><p>​        当然这软件不能支持中文，如果想看中文的，可以下载这款国产高仿的接口测试软件：<a href="https://www.apipost.cn/#">apipost</a>，还有其对应的<a href="https://doc.apipost.cn/4a77c87f97fb686b">软件手册</a>。</p><h3 id="3、postman的优缺点"><a href="#3、postman的优缺点" class="headerlink" title="3、postman的优缺点"></a>3、postman的优缺点</h3><ul><li>支持各种的请求类型: get、post、put、patch、delete 等 </li><li>支持在线存储数据，通过账号就可以进行迁移数据 </li><li>很方便的支持请求 header 和请求参数的设置 </li><li>支持不同的认证机制，如 Basic Auth，Digest Auth，OAuth 1.0，OAuth 2.0 等 </li><li>响应数据是自动按照语法格式高亮的，包括 HTML，JSON 和 XML</li></ul><h3 id="4、postman界面介绍"><a href="#4、postman界面介绍" class="headerlink" title="4、postman界面介绍"></a>4、postman界面介绍</h3><h4 id="A、postman界面组成"><a href="#A、postman界面组成" class="headerlink" title="A、postman界面组成"></a>A、postman界面组成</h4><p><img src="https://pic.imgdb.cn/item/61385dfe44eaada739bfa48d.jpg"></p><h4 id="B、控制台"><a href="#B、控制台" class="headerlink" title="B、控制台"></a>B、控制台</h4><p>​        postman控制台：先打开console，再点击send发送请求</p><p><img src="https://pic.imgdb.cn/item/61385edb44eaada739c12f27.jpg"></p><p>​        devtools控制台：view–&gt;developer下</p><p>​        快捷键（ctrl+shift+I）</p><p><img src="https://pic.imgdb.cn/item/61385f3d44eaada739c1dc2f.jpg"></p><h2 id="二、工作原理"><a href="#二、工作原理" class="headerlink" title="二、工作原理"></a>二、工作原理</h2><p>​        如下图所示，当您在Postman中输入请求并单击Send按钮时，服务器将接收您的请求并返回Postman在接口中显示的响应。</p><p><img src="https://pic.imgdb.cn/item/61385fb144eaada739c2b796.jpg"></p><h2 id="三、postman发送多种请求"><a href="#三、postman发送多种请求" class="headerlink" title="三、postman发送多种请求"></a>三、postman发送多种请求</h2><h3 id="1、发送get请求"><a href="#1、发送get请求" class="headerlink" title="1、发送get请求"></a>1、发送get请求</h3><p>​        HTTPGET请求方法用于从服务器检索数据。数据由唯一的URI(统一资源标识符)标识。GET请求可以使用“QueryStringParameters”将参数传递给服务器。例如，在下面的请求中：</p><p>eg：查询快递100的接口欧，下面准备接口地址</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//www.kuaidi100.<span class="hljs-keyword">com</span>/query?<span class="hljs-built_in">type</span>=yuantong&amp;postid=<span class="hljs-number">123456</span><br></code></pre></td></tr></table></figure><p>说明：</p><ul><li>Type、postid表示发送的参数</li><li>？后面连接参数</li><li>&amp;表示连接多个参数</li></ul><p><strong>编辑参数：</strong></p><p><img src="https://pic.imgdb.cn/item/613860b244eaada739c47f1f.jpg"></p><p><strong>注</strong>：Type设置的快递公司名称的拼音；Postid:表示快递的单号</p><h3 id="2、发送post请求"><a href="#2、发送post请求" class="headerlink" title="2、发送post请求"></a>2、发送post请求</h3><p>​        HTTP post请求方法旨在将数据传输到服务器，返回的数据取决于服务器的实现。post请求可以使用Query String Parameters以及body将参数传递给服务器。</p><p>eg：</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver"><span class="hljs-keyword">https</span>://postman-echo.com/<span class="hljs-built_in">post</span>?<span class="hljs-built_in">param</span>=java<br></code></pre></td></tr></table></figure><p>返回值</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs json">&#123;<br><span class="hljs-attr">&quot;args&quot;</span>:&#123;<br><span class="hljs-attr">&quot;param&quot;</span>:<span class="hljs-string">&quot;java&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;data&quot;</span>:&#123;&#125;,<br><span class="hljs-attr">&quot;files&quot;</span>:&#123;&#125;,<br>    <span class="hljs-attr">&quot;form&quot;</span>:&#123;&#125;,<br>    <span class="hljs-attr">&quot;headers&quot;</span>:&#123;<br>    <span class="hljs-attr">&quot;x-forwarded-proto&quot;</span>:<span class="hljs-string">&quot;https&quot;</span>,<br>    <span class="hljs-attr">&quot;x-forwarded-port&quot;</span>:<span class="hljs-string">&quot;443&quot;</span>,<br>    <span class="hljs-attr">&quot;host&quot;</span>:<span class="hljs-string">&quot;postman-echo.com&quot;</span>,<br>    <span class="hljs-attr">&quot;x-amzn-trace-id&quot;</span>:<span class="hljs-string">&quot;Root=1-5f297e6e-ff1108001ac45200f71e6e00&quot;</span>,<br>    <span class="hljs-attr">&quot;content-length&quot;</span>:<span class="hljs-string">&quot;0&quot;</span>,<br>    <span class="hljs-attr">&quot;cache-control&quot;</span>:<span class="hljs-string">&quot;no-cache&quot;</span>,<br>    <span class="hljs-attr">&quot;postman-token&quot;</span>:<span class="hljs-string">&quot;69f685b5-96ab-4ca2-83b5-26f4e1c50203&quot;</span>,<br>    <span class="hljs-attr">&quot;user-agent&quot;</span>:<span class="hljs-string">&quot;PostmanRuntime/7.4.0&quot;</span>,<br>    <span class="hljs-attr">&quot;accept&quot;</span>:<span class="hljs-string">&quot;*/*&quot;</span>,<br>    <span class="hljs-attr">&quot;cookie&quot;</span>:<span class="hljs-string">&quot;sails.sid=s%3AwSs2NC8SufYRF_X8JSeoRRYm2S8zld8-.0lM9TgljEowpovt7s9 T4jobFlIbPoF5e6gaYBSiw758&quot;</span>,<br>    <span class="hljs-attr">&quot;accept-encoding&quot;</span>:<span class="hljs-string">&quot;gzip,deflate&quot;</span><br>&#125;,<br><span class="hljs-attr">&quot;json&quot;</span>:<span class="hljs-literal">null</span>,<br><span class="hljs-attr">&quot;url&quot;</span>:<span class="hljs-string">&quot;https://postman-echo.com/post?param=java&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3、发送put请求"><a href="#3、发送put请求" class="headerlink" title="3、发送put请求"></a>3、发送put请求</h3><p>​        HTTP put请求主要是从客户端向服务器传送的数据取代指定的文档的内容。</p><p>​        put请求可以使用QueryStringParameters以及body请求体将参数传递给服务器。</p><p>eg：发送put请求，并传递字符串参数</p><p><img src="https://pic.imgdb.cn/item/6138630044eaada739c89079.jpg"></p><h3 id="4、发送delete请求"><a href="#4、发送delete请求" class="headerlink" title="4、发送delete请求"></a>4、发送delete请求</h3><p>​        HTTP DELETE方法用于删除服务器上的资源，DELETE Parameters以及body请求体将参数传递给服务器。</p><p>准备接口参数：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">delete</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/613863a444eaada739c9aab9.jpg"></p><h3 id="5、请求头"><a href="#5、请求头" class="headerlink" title="5、请求头"></a>5、请求头</h3><p>​        RequestHeader（请求头）用来说明服务器要使用的附加信息，比较重要的信息有 Cookie、Referer、User-Agent等。在Postman中可以在请求下方的Headers栏目来</p><p>设置，如下如图所示：</p><p><strong>准备接口参数：</strong></p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>postman-echo.com/post?param=java&amp;param=C<span class="hljs-comment">#</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6138652744eaada739cc6b50.jpg"></p><h3 id="6、响应头"><a href="#6、响应头" class="headerlink" title="6、响应头"></a>6、响应头</h3><p>​        ResponseHeader(响应头)其中包含了服务器对请求的应答信息，如 Content-Type、Server、Set-Cookie等，在Postman主界面下方Headers或者PostmanConsole界面都可以查看ResponseHeader信息。</p><p><img src="https://pic.imgdb.cn/item/61387ed044eaada739fa822a.png"></p><h2 id="四、授权设置"><a href="#四、授权设置" class="headerlink" title="四、授权设置"></a>四、授权设置</h2><p>​        很多时候，出于安全考虑我们的接口并不希望对外公开。这个时候就需要使用授权(Authorization)机制授权过程验证您是否具有访问服务器所需数据的权限。</p><p>​        当您发送请求时，您通常必须包含参数，以确保请求具有访问和返回所需数据的权限。</p><p>​        postman提供授权类型，可以轻松的在postman本地应用程序中处理身份验证协议。</p><p>postman支持的授权协议类型如下：</p><ul><li>No Auth·Bearer Token</li><li><strong>Basic auth</strong></li><li><strong>Digest Auth</strong></li><li><strong>OAuth 1.0</strong></li><li>OAuth 2.0</li><li><strong>Hawk Authentication</strong></li><li>AWS Signature</li><li>NTLM Authentication [Beta]</li></ul><p>这里主要介绍以上加粗的授权协议。</p><h3 id="1、如何打开授权界面"><a href="#1、如何打开授权界面" class="headerlink" title="1、如何打开授权界面"></a>1、如何打开授权界面</h3><p><img src="https://pic.imgdb.cn/item/6138687344eaada739d23cf1.jpg"></p><h3 id="2、Basic-auth授权"><a href="#2、Basic-auth授权" class="headerlink" title="2、Basic auth授权"></a>2、Basic auth授权</h3><p>​        基本身份验证是一种比较简单的授权类型，需要经过验证的用户名和密码才能访问数据资 </p><p>源。这就需要我们输入用 户名和对应的密码。</p><p><strong>eg</strong>：请求URL如下，授权账号为：</p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">用户名: postman </span><br><span class="hljs-section">密码: password </span><br>授权协议为：Basic auth<br><span class="hljs-section">URL:https://postman-echo.com/basic-auth</span><br></code></pre></td></tr></table></figure><p><strong>注：</strong></p><p>1）如果不输入用户名密码，直接使用GET请求，则会返回提示：Unauthorized</p><p><img src="https://pic.imgdb.cn/item/6138695344eaada739d3c90f.jpg"></p><p>2）输入用户名密码，选择 Basic auth 授权类型，则返回如下结果：</p><p><img src="https://pic.imgdb.cn/item/613869ab44eaada739d470aa.jpg"></p><h3 id="3、Digest-Auth授权"><a href="#3、Digest-Auth授权" class="headerlink" title="3、Digest Auth授权"></a>3、Digest Auth授权</h3><p>​        Digest auth 是一个简单的认证机制，最初是为 HTTP 协议开发的，因此也常叫做 </p><p>HTTP 摘要。 </p><p>​        其身份验证机制非 常简单，它采用哈希加密方法，以避免用明文传输用户的口令。摘 </p><p>要认证就是要核实參与通信的两方都知道双方共 </p><p>享的一个口令。 </p><p>​        当 server 想要查证用户的身份，它产生一个摘要盘问（digest challenge），并发送 </p><p>给用户。典型的摘要盘问例如 以下：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Digest <span class="hljs-attribute">realm</span>=<span class="hljs-string">&quot;iptel.org&quot;</span>, <span class="hljs-attribute">qop</span>=<span class="hljs-string">&quot;auth,auth-int&quot;</span>, <span class="hljs-attribute">nonce</span>=<span class="hljs-string">&quot;dcd98b7102dd2f0e8b11d0f600bfb0c093&quot;</span>, <span class="hljs-attribute">opaque</span>=<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-attribute">algorithm</span>=MD5<br></code></pre></td></tr></table></figure><p>这里包含了一组参数，也要发送给用户。用户使用这些參数，来产生正确的摘要回答，并发 </p><p>送给 server。各个參数意义如下：</p><p><strong>realm（领域</strong>）：领域參数是强制的，在全部的盘问中都必须有。它是目的是鉴别 SIP 消 </p><p>息中的机密。在 SIP 实际应用中，它通常设置为 SIP 代理 server 所负责的域名。 </p><p><strong>nonce（现时）</strong>：这是由 server 规定的数据字符串，在 server 每次产生一个摘要盘问时， </p><p>这个參数都是不一样的 （与前面所产生的不会雷同）。“现时”一般是由一些数据通过 md5 </p><p>杂凑运算构造的。 这种数据通常包含时间标 识和 server 的机密短语。这确保每一个“现 </p><p>时”都有一个有限的生命期（也就是过了一些时间后会失效，并且以后再也不会使用），并 </p><p>且是独一无二的 （即不论什么其他的 server 都不能产生一个同样的“现时”）。 </p><p><strong>algorithm（算法）</strong>：这是用来计算的算法。当前仅仅支持 MD5 算法。 </p><p><strong>qop（保护的质量）</strong>：这个參数规定 server 支持哪种保护方案。client 能够从列表中选择 </p><p>一个。值 auth 表示仅仅 进行身份查验， auth-int 表示进行查验外，另一些完整性保护。</p><p>须要看更具体的描写叙述，请參阅 RFC2617。参考链接点<a href="https://blog.csdn.net/guobailu/article/details/82775459">这里</a>。</p><p><strong>eg：</strong>准备URL：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/digest-auth<br></code></pre></td></tr></table></figure><p><strong>配置：</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">Digest <span class="hljs-attribute">username</span>=<span class="hljs-string">&quot;postman&quot;</span>, <span class="hljs-attribute">realm</span>=<span class="hljs-string">&quot;Users&quot;</span>, <span class="hljs-attribute">nonce</span>=<span class="hljs-string">&quot;ni1LiL0O37PRRhofWdCLmwFsnEtH1lew&quot;</span>, <span class="hljs-attribute">uri</span>=<span class="hljs-string">&quot;/digest-auth&quot;</span>, <span class="hljs-attribute">response</span>=<span class="hljs-string">&quot;254679099562cf07df9b6f5d8d15db44&quot;</span>, <span class="hljs-attribute">opaque</span>=<span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/61386ad844eaada739d67140.jpg"></p><p>一切都正确，结果如下：</p><p><img src="https://pic.imgdb.cn/item/61386b3344eaada739d718b2.jpg"></p><h3 id="4、Hawk-Auth"><a href="#4、Hawk-Auth" class="headerlink" title="4、Hawk Auth"></a>4、Hawk Auth</h3><p>​        Hawk Auth 是一个 HTTP 认证方案，使用 MAC(Message Authentication Code， </p><p>消息认证码算法)算法，它提供 了对请求进行部分加密验证的认证 HTTP 请求的方法。 </p><p>​        hawk 方案要求提供一个共享对称密匙在服务器与客户端之 间，通常这个共享的凭证 </p><p>在初始 TLS（安全传输层协议）保护阶段建立的，或者是从客户端和服务器都可用的其他 </p><p>一些共享机密信息中获得的。</p><h4 id="1）准备参数"><a href="#1）准备参数" class="headerlink" title="1）准备参数"></a>1）准备参数</h4><p>请求的URL：</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs awk">https:<span class="hljs-regexp">//</span>postman-echo.com<span class="hljs-regexp">/auth/</span>hawk<br></code></pre></td></tr></table></figure><p>秘钥信息：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Hawk</span> Auth ID: dh<span class="hljs-number">37</span>fgj<span class="hljs-number">492</span>je <br><span class="hljs-attribute">Hawk</span> Auth Key: werxhqb<span class="hljs-number">98</span>rpaxn<span class="hljs-number">39848</span>xrunpaw<span class="hljs-number">3489</span>ruxnpa<span class="hljs-number">98</span>w<span class="hljs-number">4</span>rxn <br><span class="hljs-attribute">Algorithm</span>:sha<span class="hljs-number">256</span><br></code></pre></td></tr></table></figure><h4 id="2）步骤截图"><a href="#2）步骤截图" class="headerlink" title="2）步骤截图"></a>2）步骤截图</h4><p><img src="https://pic.imgdb.cn/item/61386bd144eaada739d83448.jpg"></p><h4 id="3）执行结果"><a href="#3）执行结果" class="headerlink" title="3）执行结果"></a>3）执行结果</h4><p><img src="https://pic.imgdb.cn/item/61386bed44eaada739d86365.jpg"></p><p>如果将key改为其他任意字符则返回如下结果：</p><p><img src="https://pic.imgdb.cn/item/61386c7d44eaada739d963b3.jpg"></p><p><img src="C:\Users\EDZ\AppData\Roaming\Typora\typora-user-images\image-20210908155619418.png" alt="image-20210908155619418"></p><h3 id="5、OAuth-1-0"><a href="#5、OAuth-1-0" class="headerlink" title="5、OAuth 1.0"></a>5、OAuth 1.0</h3><p>​        OAuth（开放授权）是一个开放标准，允许用户让第三方应用访问该用户在某一网站 </p><p>上存储的私密的资源（如照片， 视频，联系人列表），而无需将用户名和密码提供给第三 </p><p>方应用。扩展资料点<a href="https://blog.huoding.com/2010/10/10/8">这里</a>。</p><h4 id="1）准备参数-1"><a href="#1）准备参数-1" class="headerlink" title="1）准备参数"></a>1）准备参数</h4><p>请求 URL 如下：请求方式为 GET，Add authorization data to</p><p>设置Request Headers为：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/oauth1<br></code></pre></td></tr></table></figure><p><strong>配置参数：</strong></p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">Consumer</span> Key: RKCGzna<span class="hljs-number">7</span>bv<span class="hljs-number">9</span>YD<span class="hljs-number">57</span>c <br><span class="hljs-attribute">Consumer</span> Secret: D+EdQ-gs$-%@<span class="hljs-number">2</span>Nu<span class="hljs-number">7</span><br></code></pre></td></tr></table></figure><h4 id="2-步骤截图"><a href="#2-步骤截图" class="headerlink" title="2)步骤截图"></a>2)步骤截图</h4><p><img src="https://pic.imgdb.cn/item/61386e2144eaada739dc902d.jpg"></p><h4 id="3）执行结果-1"><a href="#3）执行结果-1" class="headerlink" title="3）执行结果"></a>3）执行结果</h4><p>正确结果：</p><p><img src="https://pic.imgdb.cn/item/61386e6244eaada739dd0c56.jpg"></p><p>异常结果：</p><p>如果 Consumer Secret 错误则返回如下结果：</p><p><img src="https://pic.imgdb.cn/item/61386ebe44eaada739dda1ac.jpg"></p><h2 id="五、Cookie设置"><a href="#五、Cookie设置" class="headerlink" title="五、Cookie设置"></a>五、Cookie设置</h2><h3 id="1、什么是cookie"><a href="#1、什么是cookie" class="headerlink" title="1、什么是cookie"></a>1、什么是cookie</h3><p>​        cookie 是存储在浏览器中的小片段信息，每次请求后都将其发送回服务器，以便在请 </p><p>求之间存储有用的信息。比如很多网站登录界面都有保留账号密码，以便下次登录。</p><p>​        由于 HTTP 是一种无状态的协议，服务器单从网络连接上无从知道客户身份。怎么办 </p><p>呢？就给客户端们颁发一个通行证吧，每人一个，无论谁访问都必须携带自己通行证。这样 </p><p>服务器就能从通行证上确认客户身份了。这就是 Cookie 的工作原理。 </p><p>​        <strong>Cookie 是由服务端生成，存储在响应头中，返回给客户端，客户端会将 cookie 存</strong> </p><p><strong>储下来，在客户端发送请求时， user-agent 会自动获取本地存储的 cookie，将 cookie</strong> </p><p><strong>信息存储在请求头中，并发送给服务端</strong>。 </p><p>​        postman 也可以设置、获取、删除 Cookie。</p><h3 id="2、设置cookie"><a href="#2、设置cookie" class="headerlink" title="2、设置cookie"></a>2、设置cookie</h3><p>​        在 Send 按钮下方点击 Cookies 文字菜单，弹出如下界面，然后可以设置 Cookie。</p><p><img src="https://pic.imgdb.cn/item/61386f2244eaada739de537b.jpg"></p><h4 id="1）准备参数-2"><a href="#1）准备参数-2" class="headerlink" title="1）准备参数"></a>1）准备参数</h4><figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">URL:</span>https:<span class="hljs-comment">//www.baidu.com</span><br>请求方式：<span class="hljs-meta">GET</span> 请求 <br></code></pre></td></tr></table></figure><h4 id="2）操作步骤"><a href="#2）操作步骤" class="headerlink" title="2）操作步骤"></a>2）操作步骤</h4><p>​        点击下方cookie</p><p><img src="https://pic.imgdb.cn/item/61386f9444eaada739df0fb7.jpg"></p><p>添加cookie</p><p><img src="https://pic.imgdb.cn/item/61386fc144eaada739df6198.jpg"></p><p>添加参数进去</p><p><img src="https://pic.imgdb.cn/item/61386fe844eaada739dfb0e9.jpg"></p><p>点击控制台</p><p><img src="https://pic.imgdb.cn/item/6138700644eaada739dfe917.jpg"></p><p>点击发送</p><p><img src="https://pic.imgdb.cn/item/6138702144eaada739e02ba3.jpg"></p><h4 id="3）查看结果"><a href="#3）查看结果" class="headerlink" title="3）查看结果"></a>3）查看结果</h4><p><img src="https://pic.imgdb.cn/item/6138707c44eaada739e0dc23.jpg"></p><h3 id="3、获取cookie"><a href="#3、获取cookie" class="headerlink" title="3、获取cookie"></a>3、获取cookie</h3><p>​        Cookie 获取比较简单，直接获取 Response Headers 里面的 set-cookie 值即 </p><p>可，或者在主界面下方 Cookie 菜单栏里面也可以查看。</p><p><img src="https://pic.imgdb.cn/item/613870c544eaada739e15efe.jpg"></p><h3 id="4、删除cookie"><a href="#4、删除cookie" class="headerlink" title="4、删除cookie"></a>4、删除cookie</h3><p>​        点击 Cookies 文字菜单,然后可以根据需求去清除对应的 Cookie。</p><h2 id="六、变量"><a href="#六、变量" class="headerlink" title="六、变量"></a>六、变量</h2><h3 id="1、为什么需要变量"><a href="#1、为什么需要变量" class="headerlink" title="1、为什么需要变量"></a>1、为什么需要变量</h3><p>在开发不同阶段可能存在不同的环境,比如测试环境和生产环境。 </p><p>测试环境 API 如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//dev.postman.<span class="hljs-keyword">com</span>/<span class="hljs-built_in">get</span> <br>http<span class="hljs-variable">s:</span>//dev.postman.<span class="hljs-keyword">com</span>/post <br>http<span class="hljs-variable">s:</span>//dev.postman.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">put</span><br></code></pre></td></tr></table></figure><p>生产环境API如下：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/<span class="hljs-built_in">get</span> <br>http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/post <br>http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/<span class="hljs-keyword">put</span><br></code></pre></td></tr></table></figure><p>​        在这么情况下，按照常规思路要么你需要维护两套环境的 API，要么每次都手动一个 </p><p>个去修改 URL，不管哪种选择 都比较麻烦且低效，那么有没有比较的好的方法来解决这个 </p><p>问题呢？</p><p>​        通过比较我们可以发现，以上两组 API 主要是除了 host 不同之外其他都一样，其实 </p><p>把 Host 用<strong>变量</strong>替换，这样就可以灵活切换环境。</p><h3 id="2、postman的变量类型"><a href="#2、postman的变量类型" class="headerlink" title="2、postman的变量类型"></a>2、postman的变量类型</h3><p><strong>Postman 提供了变量设置，有 4 种变量类型。</strong></p><ul><li>本地变量(Local Variable)</li><li>全局变量(Global Variable)</li><li>环境变量(Environment Variable)</li><li>数据变量(Data Variable)</li></ul><h3 id="3、postman的变量详解"><a href="#3、postman的变量详解" class="headerlink" title="3、postman的变量详解"></a>3、postman的变量详解</h3><h4 id="1）环境变量-Environment-Variable"><a href="#1）环境变量-Environment-Variable" class="headerlink" title="1）环境变量(Environment Variable)"></a>1）环境变量(Environment Variable)</h4><p>​        环境变量指在不同环境，同一个变量值随着环境不同而变化，比如我们上面举例场景就 </p><p>可以使用环境变量，当在测试环境时，host 值为: dev.postman.com ,当切换到生产环境 </p><p>时，host 值变为：postman-echo.com 。 </p><p>​        环境变量设置： 在 postman 界面点击右上角眼睛图标，即可开始设置环境变量和全 </p><p>局变量。环境变量设置过程如下图所示： </p><p>​        我们可以设置两种环境 dev 和 release, </p><p>​        <strong>dev</strong> <strong>是开发测试环境；</strong> </p><p>​        <strong>release</strong> <strong>是正式的生产环境。</strong> </p><p>​        <strong>host</strong> <strong>环境变量， 根据不同的环境值不一样。</strong></p><p><img src="https://pic.imgdb.cn/item/613872f944eaada739e5592d.jpg"></p><p>同样的步骤，再来添加生产环境</p><p><img src="https://pic.imgdb.cn/item/6138731444eaada739e58658.jpg"></p><p>变量引用格式为,如下图所示： </p><p>列如：生产环境</p><p><img src="https://pic.imgdb.cn/item/6138765344eaada739eb5edc.jpg"></p><p>这里有<a href="https://jingyan.baidu.com/article/948f59247349c0980ff5f9c3.html">完整参考</a></p><h4 id="2）本地变量-LocalVariable"><a href="#2）本地变量-LocalVariable" class="headerlink" title="2）本地变量(LocalVariable )"></a>2）<strong>本地变量</strong>(LocalVariable )</h4><p>​        本地变量主要是针对单个 URL 请求设置的变量，作用域只是局限在请求范围内。如 </p><p>请求 URL 如下，设置两个本地变量（user,passwd）作为参数。请求方式为 POST。</p><p>准备参数</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">http<span class="hljs-variable">s:</span>//postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/post<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/613876cc44eaada739ec4d14.jpg"></p><p>上面通过环境变量知道，设置变量的格式为： </p><p>变量设置好之后需要赋值，在 Pre-request-Script 里面编写如下代码：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pm.variables.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&quot;wulibobo&quot;</span>); <br>pm.variables.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;passwd&quot;</span>,<span class="hljs-string">&quot;123456&quot;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6138770444eaada739ecbd73.jpg"></p><p>点击 send 执行之后的返回值如下，可以看到我们定义的变量已经发送。</p><p><img src="https://pic.imgdb.cn/item/6138772e44eaada739ecfeff.jpg"></p><h4 id="3）全局变量-Global-Variable"><a href="#3）全局变量-Global-Variable" class="headerlink" title="3）全局变量(Global Variable)"></a>3）<strong>全局变量</strong>(Global Variable)</h4><p>​        全局变量是指在所有的环境里面，变量值都是一样的，全局变量的作用域是所有请求。 </p><p>全局变量设置有两种方式：</p><h5 id="1、点击界面里设置"><a href="#1、点击界面里设置" class="headerlink" title="1、点击界面里设置"></a>1、点击界面里设置</h5><p>​        点击眼睛图标后，在 Global 选项菜单点击 Edit 菜单即可设置全局变量，如下图所示。 </p><p>全局变量的引用格式和环境变量一样。</p><p><strong>注：</strong>当环境变量和全局变量名称一样时，切换到某个环境时，环境变量会覆盖全局变量。</p><p><img src="https://pic.imgdb.cn/item/6138779444eaada739ed992c.jpg"></p><h5 id="2、在脚本里设置"><a href="#2、在脚本里设置" class="headerlink" title="2、在脚本里设置"></a>2、在脚本里设置</h5><p>​        使用如下脚本可以设置全局变量：variable_key 表示变量名称， variable_value 表示 </p><p>变量值。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs python">pm.<span class="hljs-built_in">globals</span>.<span class="hljs-built_in">set</span>(<span class="hljs-string">&quot;variable_key&quot;</span>, <span class="hljs-string">&quot;variable_value&quot;</span>);<br></code></pre></td></tr></table></figure><h2 id="七、断言"><a href="#七、断言" class="headerlink" title="七、断言"></a>七、断言</h2><h3 id="1、什么是断言？"><a href="#1、什么是断言？" class="headerlink" title="1、什么是断言？"></a>1、什么是断言？</h3><p>​        一般来说执行完测试，我们需要对测试结果来进行校验，判断结果是是否符合我们的预 </p><p>期，也就是断言。在接口测试中一般会根据响应状态码或者响应返回的数据来进行断言。 </p><p>​        Postman 提供一个测试沙箱（Postman Sandbox） 测试沙箱是一个 JavaScript 执 </p><p>行环境，可以通过 JS 脚本来编 写 pre-request Script 和 test Script。 </p><p>​        pre-request Script（预置脚本）可以用来修改一些默认参数,在请求发送之前执行。 </p><p>​        test Script（测试脚本）当接收到响应之后，再执行测试脚本。</p><h3 id="2、断言的案例"><a href="#2、断言的案例" class="headerlink" title="2、断言的案例"></a>2、断言的案例</h3><h4 id="1）准备的URL"><a href="#1）准备的URL" class="headerlink" title="1）准备的URL"></a>1）准备的URL</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">postman-<span class="hljs-keyword">echo</span>.<span class="hljs-keyword">com</span>/post<br></code></pre></td></tr></table></figure><h4 id="2）断言的规则"><a href="#2）断言的规则" class="headerlink" title="2）断言的规则"></a>2）断言的规则</h4><ul><li>响应状态码：200 </li><li>响应内容：返回的 user 参数值与定义的一致 </li><li>响应时间：小于 0.5s</li></ul><h4 id="3）准备的脚本"><a href="#3）准备的脚本" class="headerlink" title="3）准备的脚本"></a>3）准备的脚本</h4><p><strong>在</strong> <strong>pre-request Script</strong> <strong>定义变量</strong> <strong>user</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">pm.variables.<span class="hljs-builtin-name">set</span>(<span class="hljs-string">&quot;user&quot;</span>,<span class="hljs-string">&#x27;wulibobo&#x27;</span>);<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/6138785344eaada739eed4c4.jpg"></p><p><strong>在</strong> <strong>Test</strong> <strong>栏下面编写如下脚本</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//判断响应状态码 </span><br>pm.test(<span class="hljs-string">&quot;Status code is 200&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span><br><span class="hljs-function"></span>&#123; <br>pm.response.to.have.status(<span class="hljs-number">200</span>); <br>&#125;<br>); <br><br><span class="hljs-comment">//获取发送的参数值 </span><br>username=pm.variables.get(<span class="hljs-string">&quot;user&quot;</span>);<br><span class="hljs-built_in">console</span>.log(username); <br><br><span class="hljs-comment">//校验响应内容是否和请求的一致 </span><br>pm.test(<span class="hljs-string">&quot;Check username&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span><br><span class="hljs-function"></span>&#123; <br><span class="hljs-keyword">var</span> jsonData = pm.response.json(); pm.expect(jsonData.json[<span class="hljs-string">&#x27;user&#x27;</span>]).to.eql(username); <br>&#125;<br>); <br><br><span class="hljs-comment">//检测响应时间是否小于 0.5s </span><br>pm.test(<span class="hljs-string">&quot;Response time is less than 500ms&quot;</span>, <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span><br><span class="hljs-function"></span>&#123; <br>pm.expect(pm.response.responseTime).to.be.below(<span class="hljs-number">500</span>); <br>&#125;<br>);<br></code></pre></td></tr></table></figure><p><img src="https://pic.imgdb.cn/item/613878d744eaada739efae15.jpg"></p><h4 id="4）断言的结果"><a href="#4）断言的结果" class="headerlink" title="4）断言的结果"></a>4）断言的结果</h4><p><img src="https://pic.imgdb.cn/item/613878fe44eaada739efff94.jpg"></p><p><a href="https://learning.postman.com/docs/writing-scripts/intro-to-scripts/">postman测试脚本的官方文档</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>接口测试工具</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>yaml</title>
    <link href="/2021/09/06/yaml/"/>
    <url>/2021/09/06/yaml/</url>
    
    <content type="html"><![CDATA[<h2 id="一、yaml概述"><a href="#一、yaml概述" class="headerlink" title="一、yaml概述"></a>一、yaml概述</h2><h4 id="1、yaml简介"><a href="#1、yaml简介" class="headerlink" title="1、yaml简介"></a>1、yaml简介</h4><p>YAML 是专门用来写配置文件的语言，非常简洁和强大，远比 JSON 格式方便。比如同一段数据Josn和Yaml的表示分别如下：</p><p><strong>Jason</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs yaml">&#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Tom Smith&#x27;</span>,<span class="hljs-attr">age:</span> <span class="hljs-number">37</span>,<span class="hljs-attr">spouse:</span> &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Jane Smith&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">25</span> &#125;,<span class="hljs-attr">children:</span> [ &#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Jimmy Smith&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">15</span> &#125;,&#123; <span class="hljs-attr">name:</span> <span class="hljs-string">&#x27;Jenny Smith&#x27;</span>, <span class="hljs-attr">age:</span> <span class="hljs-number">12</span> &#125; ] &#125;<br></code></pre></td></tr></table></figure><p><strong>yaml</strong></p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">name:</span> Tom Smith<br><span class="hljs-symbol">age:</span> <span class="hljs-number">37</span><br><span class="hljs-symbol">spouse:</span><br><span class="hljs-symbol">    name:</span> Jane Smith<br><span class="hljs-symbol">    age:</span> <span class="hljs-number">25</span><br><span class="hljs-symbol">children:</span><br><span class="hljs-symbol">  name:</span> Jimmy Smith<br><span class="hljs-symbol">   age:</span> <span class="hljs-number">15</span><br><span class="hljs-symbol">  name:</span> Jenny Smith<br><span class="hljs-symbol">   age:</span> <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><h4 id="2、语法特点"><a href="#2、语法特点" class="headerlink" title="2、语法特点"></a>2、语法特点</h4><ul><li>大小写敏感</li><li>使用缩进表示层级关系</li><li>缩进时不允许使用Tab键，只允许使用空格</li><li>缩进的空格数目不重要，只要相同曾记得元素左侧对齐即可</li></ul><h4 id="3、下载安装"><a href="#3、下载安装" class="headerlink" title="3、下载安装"></a>3、下载安装</h4><p>cmd中输入</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">pip <span class="hljs-keyword">install</span> pyyaml<br></code></pre></td></tr></table></figure><p>或者<a href="http://pyyaml.org/wiki/PyYAML">官网</a>下载</p><h2 id="二、yaml数据类型详解"><a href="#二、yaml数据类型详解" class="headerlink" title="二、yaml数据类型详解"></a>二、yaml数据类型详解</h2><h4 id="1、支持数据类型"><a href="#1、支持数据类型" class="headerlink" title="1、支持数据类型"></a>1、支持数据类型</h4><ol><li><strong>纯量</strong>(scalars):单个的、不可再分的值。</li><li><strong>数组</strong>：一组按次序排列的值，又称为序列(sequence)/列表(list)</li><li><strong>对象</strong>：键值对的集合，又称为映射/哈希/字典</li></ol><h4 id="2、纯量"><a href="#2、纯量" class="headerlink" title="2、纯量"></a>2、纯量</h4><p>数据最小的单位，不可以再分割。类似于python中的单个变量。</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">flag</span><br></code></pre></td></tr></table></figure><h4 id="3、list数组"><a href="#3、list数组" class="headerlink" title="3、list数组"></a>3、list数组</h4><p>与Python的list结构类似，数组元素使用“-”开头，也可以根据缩进进行数组嵌套。</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs markdown"><span class="hljs-bullet">-</span> Jack<br><span class="hljs-bullet">-</span> Harry<br><span class="hljs-bullet">-</span> Sunny<br><br><span class="hljs-section"># 也可以写成一行</span><br>[Jack,Harry,Sunny]<br></code></pre></td></tr></table></figure><p>对应到python的list写法如下：</p><figure class="highlight scheme"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs scheme">[<span class="hljs-symbol">&#x27;Jack</span>&#x27;,<span class="hljs-symbol">&#x27;Harry</span>&#x27;,<span class="hljs-symbol">&#x27;Sunny</span>&#x27;]<br></code></pre></td></tr></table></figure><h4 id="4、对象"><a href="#4、对象" class="headerlink" title="4、对象"></a>4、对象</h4><p>对象的一组键值对，使用冒号结构表示。类似Python中的字典数据结构。</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">platformName:</span> <span class="hljs-string">Android</span><br><span class="hljs-attr">platformVersion:</span> <span class="hljs-number">7.1</span><span class="hljs-number">.2</span><br><br><span class="hljs-comment"># Yaml 也允许另一种写法，将所有键值对写成一个行内对象。</span><br>&#123;<span class="hljs-attr">platformName:</span> <span class="hljs-string">Android</span>,<span class="hljs-attr">platformVersion:</span> <span class="hljs-number">7.1</span><span class="hljs-number">.2</span>&#125;<br></code></pre></td></tr></table></figure><p><strong>注意：冒号后面一定要有空格！对应到python字典的写法如下：</strong></p><figure class="highlight 1c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs 1c">&#123;&#x27;platformName&#x27;: &#x27;Android&#x27;, &#x27;platformVersion&#x27;: &#x27;6.0.1&#x27;&#125;<br></code></pre></td></tr></table></figure><h4 id="5、数据嵌套"><a href="#5、数据嵌套" class="headerlink" title="5、数据嵌套"></a>5、数据嵌套</h4><p>yaml数据嵌套表示可以将上面的各类数据根据实际场景进行组合嵌套。</p><p><strong>eg</strong>：Tom Smith 37岁，他有一个妻子叫 Jane Smith，35岁。 另外他有2个孩子，一个叫Jimmy Smith，15岁；另外一个叫Jenny Smith ，12岁。</p><p><strong>familyInfo.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">name:</span> <span class="hljs-string">Tom</span> <span class="hljs-string">Smith</span><br><span class="hljs-attr">age:</span> <span class="hljs-number">37</span><br><span class="hljs-attr">spouse:</span><br>    <span class="hljs-attr">name:</span> <span class="hljs-string">Jane</span> <span class="hljs-string">Smith</span><br>    <span class="hljs-attr">age:</span> <span class="hljs-number">35</span><br><span class="hljs-attr">children:</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Jimmy</span> <span class="hljs-string">Smith</span><br>   <span class="hljs-attr">age:</span> <span class="hljs-number">15</span><br> <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">Jenny</span> <span class="hljs-string">Smith</span><br>   <span class="hljs-attr">age:</span> <span class="hljs-number">12</span><br></code></pre></td></tr></table></figure><p>转化为python：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;Tom Smith&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">37</span>,<span class="hljs-string">&#x27;spouse&#x27;</span>:&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;Jane Smith&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">25</span>&#125;,<span class="hljs-string">&#x27;childern&#x27;</span>:[&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;Jimmy Smith&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">15</span>&#125;,&#123;<span class="hljs-string">&#x27;name&#x27;</span>:<span class="hljs-string">&#x27;Jenny Smith&#x27;</span>,<span class="hljs-string">&#x27;age&#x27;</span>:<span class="hljs-number">12</span>&#125;]&#125;<br></code></pre></td></tr></table></figure><h2 id="三、yaml数据操作"><a href="#三、yaml数据操作" class="headerlink" title="三、yaml数据操作"></a>三、yaml数据操作</h2><h4 id="1、数据读取"><a href="#1、数据读取" class="headerlink" title="1、数据读取"></a>1、数据读取</h4><h5 id="1）测试场景"><a href="#1）测试场景" class="headerlink" title="1）测试场景"></a>1）测试场景</h5><ul><li>读取配置中的所有信息</li><li>读取yaml数据表中Tom Smith的姓名、年龄、信息</li><li>单独读取配偶的姓名和年龄信息</li><li>分别读取两个孩子的姓名、年龄信息</li></ul><h5 id="2）load方法"><a href="#2）load方法" class="headerlink" title="2）load方法"></a>2）load方法</h5><p>load(stream, Loader=Loader) 解析文件流中的第一个YAML文档并生成相应的Python对象。</p><h5 id="3）代码实现"><a href="#3）代码实现" class="headerlink" title="3）代码实现"></a>3）代码实现</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import yaml<br>file=open(<span class="hljs-string">&#x27;runtest.yaml&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>data=yaml<span class="hljs-selector-class">.load</span>(file)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data)</span></span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;age&#x27;</span>])</span></span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;spouse&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;spouse&#x27;</span>][<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;spouse&#x27;</span>][<span class="hljs-string">&#x27;age&#x27;</span>])</span></span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;children&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;children&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;children&#x27;</span>][<span class="hljs-number">0</span>][<span class="hljs-string">&#x27;age&#x27;</span>])</span></span><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;children&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;name&#x27;</span>])</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(data[<span class="hljs-string">&#x27;children&#x27;</span>][<span class="hljs-number">1</span>][<span class="hljs-string">&#x27;age&#x27;</span>])</span></span><br></code></pre></td></tr></table></figure><h4 id="2、数据修改"><a href="#2、数据修改" class="headerlink" title="2、数据修改"></a>2、数据修改</h4><figure class="highlight kotlin"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs kotlin"><span class="hljs-keyword">import</span> yaml<br>file=<span class="hljs-keyword">open</span>(<span class="hljs-string">&#x27;runTest.yaml&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br><span class="hljs-keyword">data</span>=yaml.load(file)<br><span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;name&#x27;</span>]=<span class="hljs-string">&#x27;Test123&#x27;</span><br>print(<span class="hljs-keyword">data</span>[<span class="hljs-string">&#x27;name&#x27;</span>])<br></code></pre></td></tr></table></figure><p><strong>注意</strong>：此处只是变量类型的数据变更，不会真正修改到yaml配置表中的数据。</p><h4 id="3、数据转化"><a href="#3、数据转化" class="headerlink" title="3、数据转化"></a>3、数据转化</h4><p><strong>方法</strong>：dump()可以将Python对象序列化成YAML流。如果stream为None，则返回生成的字符串。</p><h5 id="1）测试场景-1"><a href="#1）测试场景-1" class="headerlink" title="1）测试场景"></a>1）测试场景</h5><p>将下面python数据类型转化为yaml数据类型</p><h5 id="2）代码实践"><a href="#2）代码实践" class="headerlink" title="2）代码实践"></a>2）代码实践</h5><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs stylus">import yaml<br><br>city=<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;changsha&#x27;</span>,<span class="hljs-string">&#x27;wuhan&#x27;</span>,<span class="hljs-string">&#x27;beijing&#x27;</span>]</span><br>person=&#123;<span class="hljs-string">&#x27;tom&#x27;</span>:<span class="hljs-string">&#x27;18&#x27;</span>&#125;<br><br><span class="hljs-selector-id">#python</span> data<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(city)</span></span><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(person)</span></span><br><span class="hljs-selector-id">#yaml</span> data<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(yaml.dump(city)</span></span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(yaml.dump(person)</span></span>)<br></code></pre></td></tr></table></figure><p><strong>运行结果</strong>：</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs prolog">[<span class="hljs-string">&#x27;changsha&#x27;</span>, <span class="hljs-string">&#x27;wuhan&#x27;</span>, <span class="hljs-string">&#x27;beijing&#x27;</span>]<br>&#123;<span class="hljs-string">&#x27;tom&#x27;</span>: <span class="hljs-string">&#x27;18&#x27;</span>&#125;<br>- changsha<br>- wuhan<br>- beijing<br><br>tom: <span class="hljs-string">&#x27;18&#x27;</span><br></code></pre></td></tr></table></figure><h4 id="4、Capability配置数据分离"><a href="#4、Capability配置数据分离" class="headerlink" title="4、Capability配置数据分离"></a>4、Capability配置数据分离</h4><h5 id="1）测试场景-2"><a href="#1）测试场景-2" class="headerlink" title="1）测试场景"></a>1）测试场景</h5><p>将capability的各项参数值与代码进行分离。</p><h5 id="2）场景分析"><a href="#2）场景分析" class="headerlink" title="2）场景分析"></a>2）场景分析</h5><p>我们可以把之前capability中各项写死的配置信息来抽离出来，存放在一个yaml配置文件中，使用 对象数据类型来存储数据；然后调用load()方法读取数据，从而实现数据和代码的分离。</p><h5 id="3）代码实现-1"><a href="#3）代码实现-1" class="headerlink" title="3）代码实现"></a>3）代码实现</h5><p>1.参数配置表：<strong>desired_caps.yaml</strong></p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs avrasm"><span class="hljs-symbol">platformName:</span> Android<br><span class="hljs-symbol">platformVersion:</span> <span class="hljs-number">7.1</span><span class="hljs-number">.2</span><br><span class="hljs-symbol">deviceName:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">62025</span><br><span class="hljs-symbol">app:</span> D\kaoyan3<span class="hljs-number">.1</span><span class="hljs-number">.0</span>.apk<br><span class="hljs-symbol">noReset:</span> False<br><span class="hljs-symbol">appPackage:</span> <span class="hljs-keyword">com</span>.tal.kaoyan<br><span class="hljs-symbol">appActivity:</span> <span class="hljs-keyword">com</span>.tal.kaoyan.ui.activity.SplashActivity<br><span class="hljs-symbol">ip:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br><span class="hljs-symbol">port:</span> <span class="hljs-number">4723</span><br></code></pre></td></tr></table></figure><p>python脚本</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from appium import webdriver<br>import yaml<br><br>file=open(<span class="hljs-string">&#x27;desired_caps.yaml&#x27;</span>,<span class="hljs-string">&#x27;r&#x27;</span>)<br>data=yaml<span class="hljs-selector-class">.load</span>(file)<br><br>desired_caps=&#123;&#125;<br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;platformName&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;platformName&#x27;</span>]</span><br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;platformVersion&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;platformVersion&#x27;</span>]</span><br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;deviceName&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;deviceName&#x27;</span>]</span><br><br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;app&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;app&#x27;</span>]</span><br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;noReset&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;noReset&#x27;</span>]</span><br><br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;appPackage&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;appPackage&#x27;</span>]</span><br>desired_caps<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;appActivity&#x27;</span>]</span>=data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;appActivity&#x27;</span>]</span><br><br>driver = webdriver<span class="hljs-selector-class">.Remote</span>(<span class="hljs-string">&#x27;http://&#x27;</span>+str(data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;ip&#x27;</span>]</span>)+<span class="hljs-string">&#x27;:&#x27;</span>+str(data<span class="hljs-selector-attr">[<span class="hljs-string">&#x27;port&#x27;</span>]</span>)+<span class="hljs-string">&#x27;/wd/hub&#x27;</span>, desired_caps)<br></code></pre></td></tr></table></figure><h2 id="四、日职概述"><a href="#四、日职概述" class="headerlink" title="四、日职概述"></a>四、日职概述</h2><h5 id="1）日志作用"><a href="#1）日志作用" class="headerlink" title="1）日志作用"></a>1）日志作用</h5><p>不管是在项目开发还是测试过程中，项目运行一旦出现问题日志信息就非常重要了。日志是定位问题的重要手段，就像侦探人员要根据现场留下的线索来推断案情。</p><h5 id="2）日志级别"><a href="#2）日志级别" class="headerlink" title="2）日志级别"></a>2）日志级别</h5><p>脚本运行会有很多的情况，比如调试信息、报错异常信息等。日志要根据这些不同的情况来继续分级管理，不然对于排查问题的筛选会有比较大的干扰。 。日志一般定位的级别如下：</p><table><thead><tr><th><strong>级别</strong></th><th><strong>何时使用</strong></th></tr></thead><tbody><tr><td>DEBUG</td><td>调试信息，也是最详细的日志信息。</td></tr><tr><td>INFO</td><td>证明事情按预期工作。</td></tr><tr><td>WARNING</td><td>表明发生了一些意外，或者不久的将来会发生问题（如‘磁盘满了’）。软件还是在正常工作。</td></tr><tr><td>ERROR</td><td>由于更严重的问题，软件已不能执行一些功能了。</td></tr><tr><td>CRITICAL</td><td>严重错误，表明软件已不能继续运行了。</td></tr></tbody></table><p>首先我们日志需要按照info、debug、error等级别来进行区分的。当然这个级别可以自己去设置。在一般的情况下我们普通的输出我们直接用info类型，调试的时候用debug类型，如果预计有错误时那么我们就需要用error类型的日志，一般情况去info级别最为合适。</p><h5 id="3）日志格式"><a href="#3）日志格式" class="headerlink" title="3）日志格式"></a>3）日志格式</h5><p>日志格式化是为了提高日志的可阅读性，比如：<strong>时间+模块+行数+日志具体信息</strong> 的内容格式。如果日志信息杂乱无章的全部输出来，这样也不利于定位问题。</p><h5 id="4）日志位置"><a href="#4）日志位置" class="headerlink" title="4）日志位置"></a>4）日志位置</h5><p>一个项目中会有很多的日志采集点，而日志采集点必须结合业务属性来设置。比如在登录代码执行前可以插入“准备登录..”日志信息,如果登录完成之后，再设置登录的提示日志就会给人造成误解，无法判断到底是登录之前的问题还是登录之后的问题，因此日志采集点的位置很重要。</p><h2 id="五、logging模块"><a href="#五、logging模块" class="headerlink" title="五、logging模块"></a>五、logging模块</h2><h5 id="1）简介"><a href="#1）简介" class="headerlink" title="1）简介"></a>1）简介</h5><p>Python的logging模块提供了通用的日志系统，这个模块提供不同的日志级别，并可以采用不同的方式记录日志，比如文件，HTTP GET/POST，SMTP，Socket等，甚至可以自己实现方式记录日志。</p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-meta">#导入logging模块</span><br><span class="hljs-keyword">import</span> logging<br></code></pre></td></tr></table></figure><h5 id="2）logging构成"><a href="#2）logging构成" class="headerlink" title="2）logging构成"></a>2）logging构成</h5><p>logging模块包括<strong>logger，Handler，Filter，Formatter</strong>四个部分。</p><ul><li>Logger 记录器，用于设置日志采集。</li><li>Handler 处理器，将日志记录发送至合适的路径。</li><li>Filter 过滤器，提供了更好的粒度控制，它可以决定输出哪些日志记录。</li><li>Formatter 格式化器，指明了最终输出中日志的格式。</li></ul><h5 id="3）Logger记录器"><a href="#3）Logger记录器" class="headerlink" title="3）Logger记录器"></a>3）Logger记录器</h5><p>Logger是一个树形层级结构，在使用接口debug，info，warn，error，critical；使用之前必须创建Logger实例，即创建一个记录器，如果没有显式的进行创建，则默认创建一个root logger，并应用默认的日志级别(WARN)，Handler和Formatter。</p><p><strong>方法</strong>：</p><p>basicConfig(参数) 为日志记录系统做基本配置。</p><p><strong>部分参数</strong></p><p><strong>filename</strong> 指定日志文件名称</p><p><strong>filemode</strong> 指定打开文件的模式，如果指定了filename（如果文件模式未指定，则默认为’a）</p><p>文件读写模式</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">w</span> 以写方式打开，<br><span class="hljs-selector-tag">W</span> 文件若存在，首先要清空，然后（重新）创建<br><span class="hljs-selector-tag">a</span> 以追加模式打开 (从 EOF 开始, 必要时创建新文件)<br><span class="hljs-selector-tag">r</span>+ 以读写模式打开<br><span class="hljs-selector-tag">w</span>+ 以读写模式打开 (参见 w )<br><span class="hljs-selector-tag">a</span>+ 以读写模式打开 (参见 a )<br></code></pre></td></tr></table></figure><p><strong>format</strong> 为处理程序使用指定的格式字符串。</p><p><strong>datefmt</strong> 使用指定的日期/时间格式。样式如果指定了格式字符串，则使用它来指定 格式字符串的类型.</p><p><strong>level</strong> 将根记录器级别设置为指定级别。</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import<span class="hljs-built_in"> logging</span><br><span class="hljs-built_in"></span>logging.basicConfig(<span class="hljs-attribute">level</span>=logging.DEBUG)<br>logging.basicConfig(<span class="hljs-attribute">level</span>=logging.INFO)<br>logging.<span class="hljs-builtin-name">debug</span>(<span class="hljs-string">&#x27;debug info&#x27;</span>)<br>logging.<span class="hljs-builtin-name">info</span>(<span class="hljs-string">&#x27;hello tom！&#x27;</span>)<br>logging.<span class="hljs-builtin-name">warning</span>(<span class="hljs-string">&#x27;warning info&#x27;</span>)<br>logging.<span class="hljs-builtin-name">error</span>(<span class="hljs-string">&#x27;error info&#x27;</span>)<br>logging.critical(<span class="hljs-string">&#x27;critical info&#x27;</span>)<br></code></pre></td></tr></table></figure><h5 id="4）Handler处理器"><a href="#4）Handler处理器" class="headerlink" title="4）Handler处理器"></a>4）Handler处理器</h5><p>Handler 处理器，将日志记录发送至合适的路径,Handler处理器类型有很多种，比较常用的有三个：</p><p><strong>1°StreamHandler</strong></p><p>将日志记录输出发送到诸如sys.stdout，sys.stderr或任何类似文件流的对象。</p><p><strong>2°FileHandler</strong></p><p>将日志记录输出发送到磁盘文件。 它继承了StreamHandler的输出功能。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">logging.basic<span class="hljs-constructor">Config(<span class="hljs-params">filename</span>=&#x27;<span class="hljs-params">runlog</span>.<span class="hljs-params">log</span>&#x27;,<span class="hljs-params">level</span>=<span class="hljs-params">logging</span>.DEBUG)</span><br></code></pre></td></tr></table></figure><p><strong>3°NullHandler</strong></p><p>不做任何格式化或输出。 它本质上是一个开发人员使用的“无操作”处理程序。</p><p><strong>4°Formatter</strong></p><p>使用Formatter对象设置日志信息最后的规则、结构和内容，默认的时间格式为:</p><figure class="highlight cos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cos"><span class="hljs-built_in">%Y</span>-<span class="hljs-built_in">%m</span>-<span class="hljs-built_in">%d</span> <span class="hljs-built_in">%H</span>:<span class="hljs-built_in">%M</span>:<span class="hljs-built_in">%S</span><br></code></pre></td></tr></table></figure><table><thead><tr><th><strong>格式</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>%(levelno)s</td><td>打印日志级别的数值</td></tr><tr><td>%(levelname)s</td><td>打印日志级别名称</td></tr><tr><td>%(pathname)s</td><td>打印当前执行程序的路径</td></tr><tr><td>%(filename)s</td><td>打印当前执行程序名称</td></tr><tr><td>%(funcName)s</td><td>打印日志的当前函数</td></tr><tr><td>%(lineno)d</td><td>打印日志的当前行号</td></tr><tr><td>%(asctime)s</td><td>打印日志的时间</td></tr><tr><td>%(thread)d</td><td>打印线程id</td></tr><tr><td>%(threadName)s</td><td>打印线程名称</td></tr><tr><td>%(process)d</td><td>打印进程ID</td></tr><tr><td>%(message)s</td><td>打印日志信息</td></tr></tbody></table><p>使用方法：</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs routeros">import<span class="hljs-built_in"> logging</span><br><span class="hljs-built_in"></span>logging.basicConfig(<span class="hljs-attribute">filename</span>=<span class="hljs-string">&#x27;runlog.log&#x27;</span>,level=logging.DEBUG,<br><span class="hljs-attribute">format</span>=<span class="hljs-string">&#x27;%(asctime)s %(filename)s[line:%(lineno)d] %(levelname)s %(message)s&#x27;</span>)<br>logging.<span class="hljs-builtin-name">debug</span>(<span class="hljs-string">&#x27;debug info&#x27;</span>)<br>logging.<span class="hljs-builtin-name">info</span>(<span class="hljs-string">&#x27;hello tom！&#x27;</span>)<br>logging.<span class="hljs-builtin-name">warning</span>(<span class="hljs-string">&#x27;warning info&#x27;</span>)<br>logging.<span class="hljs-builtin-name">error</span>(<span class="hljs-string">&#x27;error info&#x27;</span>)<br>logging.critical(<span class="hljs-string">&#x27;critical info&#x27;</span>)<br><br></code></pre></td></tr></table></figure><p>输出结果：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">02</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">20</span>,<span class="hljs-number">094</span> ��־.py[line:<span class="hljs-number">5</span>] DEBUG debug info<br><span class="hljs-attribute">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">02</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">41</span>,<span class="hljs-number">359</span> ��־.py[line:<span class="hljs-number">5</span>] DEBUG debug info<br><span class="hljs-attribute">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">02</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">41</span>,<span class="hljs-number">360</span> ��־.py[line:<span class="hljs-number">6</span>] INFO hello tom��<br><span class="hljs-attribute">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">02</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">41</span>,<span class="hljs-number">360</span> ��־.py[line:<span class="hljs-number">7</span>] WARNING warning info<br><span class="hljs-attribute">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">02</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">41</span>,<span class="hljs-number">360</span> ��־.py[line:<span class="hljs-number">8</span>] ERROR error info<br><span class="hljs-attribute">2021</span>-<span class="hljs-number">09</span>-<span class="hljs-number">02</span> <span class="hljs-number">11</span>:<span class="hljs-number">50</span>:<span class="hljs-number">41</span>,<span class="hljs-number">360</span> ��־.py[line:<span class="hljs-number">9</span>] CRITICAL critical info<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>monkey日志管理</title>
    <link href="/2021/09/04/monkey%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/"/>
    <url>/2021/09/04/monkey%E6%97%A5%E5%BF%97%E7%AE%A1%E7%90%86/</url>
    
    <content type="html"><![CDATA[<h1 id="自定义脚本的稳定性测试"><a href="#自定义脚本的稳定性测试" class="headerlink" title="自定义脚本的稳定性测试"></a>自定义脚本的稳定性测试</h1><p>常规Monkey测试执行的是随机的事件流，但如果只是想让Monkey测试某个特定场景这时候就需要用到自定义脚本了，Monkey支持执行用户自定义脚本的测试，用户只需要按照Monkey脚本的规范编写好脚本，存放到手机上，启动Monkey通过-f 参数调用脚本即可</p><h1 id="需求分析"><a href="#需求分析" class="headerlink" title="需求分析"></a>需求分析</h1><h2 id="获取元素坐标点位置"><a href="#获取元素坐标点位置" class="headerlink" title="获取元素坐标点位置"></a>获取元素坐标点位置</h2><p>Monkey脚本只能通过<strong>坐标</strong>的方式来定位点击和移动事件的屏幕位置，这里就需要提前获取坐标信息。获取坐标信息的方法很多，最简单的方法就是打开手机中的开发人员选项，打开“显示指针位置”。随后，在屏幕上的每次操作，在导航栏上都会显示坐标信息。</p><h2 id="monkey脚本API"><a href="#monkey脚本API" class="headerlink" title="monkey脚本API"></a>monkey脚本API</h2><p>LaunchActivity(pkg_name, cl_name)：启动应用的Activity。参数：包名和启动的Activity。</p><p>Tap(x, y, tapDuration)： 模拟一次手指单击事件。参数：x,y为控件坐标，tapDuration为点击的持续时间，此参数可省略。</p><p>UserWait(sleepTime)： 休眠一段时间</p><p>DispatchPress(keyName)： 按键。参数： keycode。 RotateScreen(rotationDegree, persist)： 旋转屏幕。 参数：rotationDegree为旋转角度， e.g. 1代表90度；persist表示旋转之后是否固定，0表示旋转后恢复，非0则表示固定不变。</p><p>DispatchString(input)： 输入字符串。</p><p>DispatchFlip(true/false)： 打开或者关闭软键盘。</p><p>PressAndHold(x, y, pressDuration)： 模拟长按事件。</p><p>Drag(xStart, yStart, xEnd, yEnd, stepCount)： 用于模拟一个拖拽操作。</p><p>PinchZoom(x1Start, y1Start, x1End, y1End, x2Start, y2Start, x2End, y2End, stepCount)： 模拟缩放手势。</p><p>LongPress()： 长按2秒。</p><p>DeviceWakeUp()： 唤醒屏幕。</p><p>PowerLog(power_log_type, test_case_status)： 模拟电池电量信息。</p><p>WriteLog()： 将电池信息写入sd卡。</p><p>RunCmd(cmd)： 运行shell命令。</p><p>DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFlags)： 向指定位置，发送单个手势。</p><p>DispatchPointer(downtime,eventTime,action,x,yxpressure,size,metastate,xPrecision,yPrecision,device,edgeFilags)： 发送按键消息。</p><p>LaunchInstrumentation(test_name,runner_name)： 运行一个instrumentation测试用例。</p><p>DispatchTrackball： 模拟发送轨迹球事件。</p><p>ProfileWait： 等待5秒。</p><p>StartCaptureFramerate()： 获取帧率。</p><p>EndCaptureFramerate(input)： 结束获取帧率。</p><h2 id="monkey脚本格式"><a href="#monkey脚本格式" class="headerlink" title="monkey脚本格式"></a>monkey脚本格式</h2><p><strong>头部</strong></p><figure class="highlight haskell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs haskell"><span class="hljs-class"><span class="hljs-keyword">type</span> = raw events  </span><br><span class="hljs-title">count</span> = <span class="hljs-number">1</span>  <br><span class="hljs-title">speed</span> = <span class="hljs-number">1.0</span>  <br>//下面为monkey命令  <br><span class="hljs-title">start</span> <span class="hljs-class"><span class="hljs-keyword">data</span> &gt;&gt;   </span><br>具体的monkey脚本内容  <br></code></pre></td></tr></table></figure><p><strong>编写脚本</strong></p><p><strong>kyb.txt</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs stylus">#头文件信息<br><br>type = raw events <br><br>count = <span class="hljs-number">1</span><br><br>speed = <span class="hljs-number">1.0</span><br><br>#启动测试<br>start data &gt;&gt;<br><br><span class="hljs-function"><span class="hljs-title">LaunchActivity</span><span class="hljs-params">(com.tal.kaoyan,com.tal.kaoyan.ui.activity.SplashActivity)</span></span><br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">624</span>,<span class="hljs-number">900</span>,<span class="hljs-number">1000</span>)</span></span> #点击取消升级<br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">806</span>,<span class="hljs-number">64</span>,<span class="hljs-number">1000</span>)</span></span> #点击跳过<br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">217</span>,<span class="hljs-number">378</span>,<span class="hljs-number">1000</span>)</span></span> #点击用户名输入框<br><span class="hljs-function"><span class="hljs-title">DispatchString</span><span class="hljs-params">(账户)</span></span><br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">197</span>,<span class="hljs-number">461</span>,<span class="hljs-number">1000</span>)</span></span> #点击密码输入框<br><span class="hljs-function"><span class="hljs-title">DispatchString</span><span class="hljs-params">(密码)</span></span><br><span class="hljs-function"><span class="hljs-title">UserWait</span><span class="hljs-params">(<span class="hljs-number">2000</span>)</span></span><br><br><span class="hljs-function"><span class="hljs-title">Tap</span><span class="hljs-params">(<span class="hljs-number">343</span>,<span class="hljs-number">637</span>,<span class="hljs-number">1000</span>)</span></span> #点击登录按钮<br></code></pre></td></tr></table></figure><p><strong>执行脚本</strong></p><p>脚本编写完成后，传到手机设备上，然后执行。</p><figure class="highlight taggerscript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs taggerscript">adb push C:<span class="hljs-symbol">\U</span>sers<span class="hljs-symbol">\a</span>dmin<span class="hljs-symbol">\D</span>esktop<span class="hljs-symbol">\k</span>yb1.txt /sdcard<br><br>adb shell monkey -f /sdcard/kyb1.txt -v 1<br></code></pre></td></tr></table></figure><p><strong>执行结果</strong></p><figure class="highlight asciidoc"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs asciidoc">C:\Users\admin&gt;adb shell monkey -f /sdcard/kyb.txt -v 1<br><span class="hljs-meta">:Monkey:</span> seed=1524592021303 count=1<br><span class="hljs-meta">:IncludeCategory:</span> android.intent.category.LAUNCHER<br><span class="hljs-meta">:IncludeCategory:</span> android.intent.category.MONKEY<br>Replaying 0 events with speed 1.0<br><span class="hljs-meta">:Switch:</span> #Intent;action=android.intent.action.MAIN;category=android.intent.category.LAUNCHER;launchFlags=0x10200000;component=com.tal.kaoyan/.ui.activity.SplashActivity;end<br><span class="hljs-code">    // Allowing start of Intent &#123; act=android.intent.action.MAIN cat=[android.intent.category.LAUNCHER] cmp=com.tal.kaoyan/.ui.activity.SplashActivity &#125; in package com.tal.kaoyan</span><br><span class="hljs-meta">:Sending Touch (ACTION_DOWN):</span> 0:(267.0,1233.0)<br><span class="hljs-code">    // Allowing start of Intent &#123; act=com.android.systemui.recent.action.TOGGLE_RECENTS cmp=com.android.systemui/.recent.RecentsActivity &#125; in package com.android.systemui</span><br><span class="hljs-meta">:Sending Touch (ACTION_UP):</span> 0:(267.0,1233.0)<br>Events injected: 5<br>:Sending rotation degree=0, persist=false<br><span class="hljs-meta">:Dropped:</span> keys=0 pointers=0 trackballs=0 flips=0 rotations=0<br>## Network stats: elapsed time=7201ms (0ms mobile, 0ms wifi, 7201ms not connected)<br><span class="hljs-comment">// Monkey finished</span><br></code></pre></td></tr></table></figure><p><strong>注意事项</strong></p><p>头文件代码书写注意“=”两边预留空格，否则会出现如下报错</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stylus">java<span class="hljs-selector-class">.lang</span><span class="hljs-selector-class">.NumberFormatException</span>: Invalid int: <span class="hljs-string">&quot;&quot;</span><br></code></pre></td></tr></table></figure><p><a href="https://www.cnblogs.com/mgzc-1508873480/p/7911373.html">参考资料</a></p>]]></content>
    
    
    
    <tags>
      
      <tag>monkey日志管理</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>韶光抚月 天下人间</title>
    <link href="/2021/09/01/%E9%9F%B6%E5%85%89%E6%8A%9A%E6%9C%88-%E5%A4%A9%E4%B8%8B%E4%BA%BA%E9%97%B4/"/>
    <url>/2021/09/01/%E9%9F%B6%E5%85%89%E6%8A%9A%E6%9C%88-%E5%A4%A9%E4%B8%8B%E4%BA%BA%E9%97%B4/</url>
    
    <content type="html"><![CDATA[<h4 id="原来你也？？"><a href="#原来你也？？" class="headerlink" title="原来你也？？"></a>原来你也<a href="https://ys.mihoyo.com/">？？</a></h4>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>appium</title>
    <link href="/2021/09/01/appium/"/>
    <url>/2021/09/01/appium/</url>
    
    <content type="html"><![CDATA[<h4 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h4><h5 id="一、元素定位方式（8种）"><a href="#一、元素定位方式（8种）" class="headerlink" title="一、元素定位方式（8种）"></a>一、元素定位方式（8种）</h5><p>\1) id定位</p><figure class="highlight isbl"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs isbl"> <span class="hljs-function"><span class="hljs-title">find_element_by_id</span>()</span><br></code></pre></td></tr></table></figure><p>\2) name</p><figure class="highlight less"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs less"><span class="hljs-selector-tag">driver</span><span class="hljs-selector-class">.find_element_by_name</span>(<span class="hljs-string">&#x27;请输入用户名&#x27;</span>)<span class="hljs-selector-class">.send_keys</span>(<span class="hljs-string">&#x27;&#x27;</span>)<br></code></pre></td></tr></table></figure><p>\3) class</p><p>​        classname定位是根据元素类型来进行定位，但是实际情况中很多元素的classname都是相同的，如上例中登录页面中的用户名和密码都是className属性值都是：<strong>“android.widget.EditText”</strong> 因此只能定位第一个元素也就是用户名，而密码输入框就需要使用其他方式来定位，这样其实很鸡肋.一般情况下如果有id就不必使用classname定位。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">driver.find<span class="hljs-constructor">_element_by_class_name(&#x27;<span class="hljs-params">android</span>.<span class="hljs-params">widget</span>.EditText&#x27;)</span>.send<span class="hljs-constructor">_keys(&#x27;<span class="hljs-params">xxx</span>&#x27;)</span><br>driver.find<span class="hljs-constructor">_element_by_class_name(&#x27;<span class="hljs-params">android</span>.<span class="hljs-params">widget</span>.Button&#x27;)</span>.click<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>\4) List定位</p><p>​        List定位首先是使用”<strong>find_elements_by_XX</strong>“获取一组相同的class属性的元素，然后使用数组下标来区分标记不同元素进行相关操作。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">driver.find<span class="hljs-constructor">_element_by_id(&#x27;<span class="hljs-params">com</span>.<span class="hljs-params">tal</span>.<span class="hljs-params">kaoyan</span>:<span class="hljs-params">id</span><span class="hljs-operator">/</span><span class="hljs-params">login_register_text</span>&#x27;)</span>.click<span class="hljs-literal">()</span><br><br>driver.find<span class="hljs-constructor">_element_by_id(&#x27;<span class="hljs-params">com</span>.<span class="hljs-params">tal</span>.<span class="hljs-params">kaoyan</span>:<span class="hljs-params">id</span><span class="hljs-operator">/</span><span class="hljs-params">activity_register_userheader</span>&#x27;)</span>.click<span class="hljs-literal">()</span><br><br>images=driver.find<span class="hljs-constructor">_elements_by_id(&#x27;<span class="hljs-params">com</span>.<span class="hljs-params">tal</span>.<span class="hljs-params">kaoyan</span>:<span class="hljs-params">id</span><span class="hljs-operator">/</span><span class="hljs-params">item_image</span>&#x27;)</span><br><br>images<span class="hljs-literal">[<span class="hljs-number">2</span>]</span>.click<span class="hljs-literal">()</span><br><br>driver.find<span class="hljs-constructor">_element_by_id(&#x27;<span class="hljs-params">com</span>.<span class="hljs-params">tal</span>.<span class="hljs-params">kaoyan</span>:<span class="hljs-params">id</span><span class="hljs-operator">/</span><span class="hljs-params">save</span>&#x27;)</span>.click<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>\5) 相对定位</p><p>​        先找到该元素的对应属性的父节点，然后基于父节点进行元素定位。</p><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">driver.find<span class="hljs-constructor">_element_by_id(&#x27;<span class="hljs-params">com</span>.<span class="hljs-params">tal</span>.<span class="hljs-params">kaoyan</span>:<span class="hljs-params">id</span><span class="hljs-operator">/</span><span class="hljs-params">login_register_text</span>&#x27;)</span>.click<span class="hljs-literal">()</span><br>root_element=driver.find<span class="hljs-constructor">_element_by_id(&#x27;<span class="hljs-params">com</span>.<span class="hljs-params">tal</span>.<span class="hljs-params">kaoyan</span>:<span class="hljs-params">id</span><span class="hljs-operator">/</span><span class="hljs-params">activity_register_parentlayout</span>&#x27;)</span><br>root_element.find<span class="hljs-constructor">_element_by_class_name(&#x27;<span class="hljs-params">android</span>.<span class="hljs-params">widget</span>.ImageView&#x27;)</span>.click<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>\6) xpath定位</p><p>​        xpath定位是一种路径定位方式，主要是依赖于元素绝对路径或者相关属性来定位，但是绝对路径xpath执行效率比较低（特别是元素路径比较深的时候），一般使用比较少。通常使用xpath相对路径和属性定位。</p><ul><li>‘<strong>/</strong>‘:从根节点选取</li><li>‘<strong>//</strong>‘:从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</li><li>‘<strong>nodename</strong>‘:选取此节点的所有子节点</li><li>‘<strong>·</strong>‘：选取当前节点</li><li>‘<strong>··</strong>‘：选取当前节点的父节点</li><li>‘<strong>@</strong>‘:选取属性</li></ul><figure class="highlight reasonml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs reasonml">driver.find<span class="hljs-constructor">_element_by_xpath(&#x27;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">android</span>.<span class="hljs-params">widget</span>.EditText[@<span class="hljs-params">text</span>=<span class="hljs-string">&quot;请输入用户名&quot;</span>]&#x27;)</span>.send<span class="hljs-constructor">_keys(&#x27;<span class="hljs-params">xxx</span>&#x27;)</span><br>driver.find<span class="hljs-constructor">_element_by_xpath(&#x27;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-operator">*</span>[@<span class="hljs-params">class</span>=<span class="hljs-string">&quot;android.widget.EditText&quot;</span> <span class="hljs-params">and</span> @<span class="hljs-params">index</span>=<span class="hljs-string">&quot;3&quot;</span>]&#x27;)</span>.send<span class="hljs-constructor">_keys(&#x27;<span class="hljs-params">xxx</span>&#x27;)</span><br>driver.find<span class="hljs-constructor">_element_by_xpath(&#x27;<span class="hljs-operator">/</span><span class="hljs-operator">/</span><span class="hljs-params">android</span>.<span class="hljs-params">widget</span>.Button&#x27;)</span>.click<span class="hljs-literal">()</span><br></code></pre></td></tr></table></figure><p>\7) H5页面元素定位</p><p>\8) Uiautomator定位</p><h5 id="EXTRA"><a href="#EXTRA" class="headerlink" title="EXTRA"></a><strong>EXTRA</strong></h5><p>滑动效果：</p><p>swipe()方法的参数说明：<br>start_x：起始横坐标<br>start_y：起始纵坐标<br>end_x：结束时横坐标<br>end_y：结束时纵坐标<br>duration：滑动持续时间，单位毫秒，默认None（一般设置500-1000毫秒比较合适）</p><figure class="highlight livecodeserver"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs livecodeserver">:Args:<br>         - start_x - x-coordinate <span class="hljs-keyword">at</span> which <span class="hljs-built_in">to</span> <span class="hljs-built_in">start</span><br>         - start_y - y-coordinate <span class="hljs-keyword">at</span> which <span class="hljs-built_in">to</span> <span class="hljs-built_in">start</span><br>         - end_x - x-coordinate <span class="hljs-keyword">at</span> which <span class="hljs-built_in">to</span> <span class="hljs-built_in">stop</span><br>         - end_y - y-coordinate <span class="hljs-keyword">at</span> which <span class="hljs-built_in">to</span> <span class="hljs-built_in">stop</span><br>         - duration - (optional) <span class="hljs-built_in">time</span> <span class="hljs-built_in">to</span> take <span class="hljs-keyword">the</span> swipe, <span class="hljs-keyword">in</span> ms.<br><br>        :Usage:<br>            driver.swipe(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">100</span>, <span class="hljs-number">400</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>Hello handsome boy</title>
    <link href="/2021/09/01/hey%20man%EF%BC%81/"/>
    <url>/2021/09/01/hey%20man%EF%BC%81/</url>
    
    <content type="html"><![CDATA[<p>Welcome to my blog with a handsome boy! It is your pleasure. Then start your browsing!However,you can also leave a message under <a href="https://user.qzone.qq.com/550531980">my qq</a>！</p>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>从0开始搭建一个博客站点</title>
    <link href="/2021/09/01/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/"/>
    <url>/2021/09/01/%E4%BB%8E0%E5%BC%80%E5%A7%8B%E6%90%AD%E5%BB%BA%E4%B8%80%E4%B8%AA%E5%8D%9A%E5%AE%A2%E7%AB%99%E7%82%B9/</url>
    
    <content type="html"><![CDATA[<h1 id="1-Hexo的入门"><a href="#1-Hexo的入门" class="headerlink" title="1.Hexo的入门"></a>1.Hexo的入门</h1><p> hexo 可以理解为是基于node.js制作的一个博客工具，不是我们理解的一个开源的博客系统。</p><p> hexo 正常来说，不需要部署到我们的服务器上，我们的服务器上保存的，其实是基于在hexo通过markdown编写的文章，然后hexo帮我们生成静态的html页面，然后，将生成的html上传到我们的服务器。简而言之：hexo是个静态页面生成、上传的工具。</p><p>参考：<a href="https://hexo.io/zh-cn/docs/configuration">官网文档</a></p><h2 id="1-1安装node-js"><a href="#1-1安装node-js" class="headerlink" title="1.1安装node.js"></a>1.1安装node.js</h2><p><a href="https://www.cnblogs.com/liuqiyun/p/8133904.html">网上安装教程</a></p><p><strong>验证安装是否成功</strong></p><ol><li><p>进入cmd</p></li><li><p>输入node -v</p></li><li><p>出现相应的版本号ok</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Windows\System<span class="hljs-number">32</span>&gt;node -v<br><span class="hljs-attribute">v14</span>.<span class="hljs-number">17</span>.<span class="hljs-number">5</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="1-2安装git"><a href="#1-2安装git" class="headerlink" title="1.2安装git"></a>1.2安装git</h2><p><a href="https://blog.csdn.net/huangqqdy/article/details/83032408">git安装教程</a></p><p><strong>验证git安装成功与否</strong></p><ol><li><p>进入cmd</p></li><li><p>输入 git version</p></li><li><p>出现相应的版本号ok</p></li></ol><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">C</span>:\Windows\System<span class="hljs-number">32</span>&gt;git version<br><span class="hljs-attribute">git</span> version <span class="hljs-number">2</span>.<span class="hljs-number">33</span>.<span class="hljs-number">0</span>.windows.<span class="hljs-number">2</span><br></code></pre></td></tr></table></figure><h2 id="1-3安装、配置hexo文件"><a href="#1-3安装、配置hexo文件" class="headerlink" title="1.3安装、配置hexo文件"></a>1.3安装、配置hexo文件</h2><p>1.进入git bash窗口</p><p>2.输入以下命令</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure><p>3.出现一堆代码</p><p>4.输入以下命令</p><figure class="highlight jboss-cli"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs jboss-cli">hexo init d:/文件夹名 <span class="hljs-params">----</span>表示在d盘创建这个文件夹 <br><span class="hljs-keyword">cd</span> 文件名 <span class="hljs-params">----</span>进入文件夹 <br>npm install <span class="hljs-params">----</span>安装<br></code></pre></td></tr></table></figure><h2 id="1-4关于hexo文件夹里面的内容"><a href="#1-4关于hexo文件夹里面的内容" class="headerlink" title="1.4关于hexo文件夹里面的内容"></a>1.4关于hexo文件夹里面的内容</h2><h3 id="1-4-1-hexo文件目录"><a href="#1-4-1-hexo文件目录" class="headerlink" title="1.4.1 hexo文件目录"></a>1.4.1 hexo文件目录</h3><p>安装hexo完毕，d盘目录下你创建的文档下面的内容：</p><figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs dos">├── _config.yml<br>├── .deploy_git<br>├── .github<br>├── public<br>├── themes<br>├── source<br>|   └── .gitkeep <br>├── scraffolds<br>|   ├── draft.<span class="hljs-built_in">md</span><br>    ├── page.<span class="hljs-built_in">md</span><br>    └── post.<span class="hljs-built_in">md</span><br></code></pre></td></tr></table></figure><h3 id="1-4-2-hexo目录文件介绍（了解）"><a href="#1-4-2-hexo目录文件介绍（了解）" class="headerlink" title="1.4.2 hexo目录文件介绍（了解）"></a>1.4.2 hexo目录文件介绍（了解）</h3><p><strong>_confifig.yml</strong></p><p>网站的配置信息，您可以在此配置大部分的参数。</p><p><strong>package.json</strong></p><p>已经默认给你安装的应用程序的信息</p><p><strong>scaffffolds</strong></p><p>模版文件夹。当您新建文章时，Hexo 会根据 scaffffold 来建立文件，了解即可</p><p><strong>source</strong></p><p>资源文件夹是存放用户资源的地方。一般你通过命令创建的文章都存储在 <code>_posts</code> 文件夹里面</p><p><strong>themes</strong></p><p>这个主要存放的hexo的主题文件，类似英雄皮肤，通过更改不同主题来实现不同酷炫的效果。</p><h2 id="1-5-confifig-yml配置文件详解（了解）"><a href="#1-5-confifig-yml配置文件详解（了解）" class="headerlink" title="1.5_confifig.yml配置文件详解（了解）"></a>1.5_confifig.yml配置文件详解（了解）</h2><h3 id="1-5-1网站相关"><a href="#1-5-1网站相关" class="headerlink" title="1.5.1网站相关"></a>1.5.1网站相关</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>title </code></td><td>网站标题</td></tr><tr><td><code>subtitle         </code></td><td>网站副标题</td></tr><tr><td><code>description      </code></td><td>网站描述</td></tr><tr><td><code>author           </code></td><td>你的名字</td></tr><tr><td><code>language         </code></td><td>网站使用的语言</td></tr><tr><td><code>timezone         </code></td><td>网站时区<a href="https://en.wikipedia.org/wiki/List_of_tz_database_time_zones">时区列表</a></td></tr></tbody></table><h3 id="1-5-2网址相关"><a href="#1-5-2网址相关" class="headerlink" title="1.5.2网址相关"></a>1.5.2网址相关</h3><table><thead><tr><th>参数</th><th>描述</th></tr></thead><tbody><tr><td><code>url                        </code></td><td>网址</td></tr><tr><td><code>root                    </code></td><td>网站根目录</td></tr><tr><td><code>permalink                </code></td><td>文章<a href="https://hexo.io/zh-cn/docs/permalinks">永久链接</a> 格式</td></tr><tr><td><code>permalink_defaults        </code></td><td>永久链接中各部分的默认值</td></tr></tbody></table><h3 id="1-5-3目录相关"><a href="#1-5-3目录相关" class="headerlink" title="1.5.3目录相关"></a>1.5.3目录相关</h3><table><thead><tr><th>参数</th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>source_dir</code></td><td>资源文件夹，这个文件夹用来存放内容。</td><td><code>source </code></td></tr><tr><td><code>public_dir</code></td><td><code>公共文件夹，这个文件夹用于存放生成的站点文件。</code></td><td><code>public</code></td></tr><tr><td><code>archive_dir</code></td><td>标签文件夹</td><td><code>tags </code></td></tr><tr><td><code>category_dir</code></td><td><code>归档文件夹</code></td><td><code>categories </code></td></tr><tr><td><code>code_dir</code></td><td>Include code 文件夹</td><td><code>downloads/code</code></td></tr><tr><td><code>i18n_dir</code></td><td><code>国际化（i18n）文件夹 </code></td><td><code>:lang </code></td></tr><tr><td><code>skip_render</code></td><td>跳过指定文件的渲染，您可使用 <a href="https://github.com/isaacs/node-glob">glob 表达式</a>来匹配路径。</td><td></td></tr></tbody></table><h3 id="1-5-4日期与格式"><a href="#1-5-4日期与格式" class="headerlink" title="1.5.4日期与格式"></a>1.5.4日期与格式</h3><p>Hexo 使用 <a href="http://momentjs.com/">Moment.js</a> 来解析和显示时间。</p><table><thead><tr><th><strong>参数</strong></th><th>描述</th><th>默认值</th></tr></thead><tbody><tr><td><code>date_format</code></td><td>日期格式</td><td><code>YYYY-MM-DD </code></td></tr><tr><td><code>time_format</code></td><td>时间格式</td><td><code>H:mm:ss</code></td></tr></tbody></table><h2 id="1-6hexo相关命令"><a href="#1-6hexo相关命令" class="headerlink" title="1.6hexo相关命令"></a>1.6hexo相关命令</h2><p><a href="https://www.cnblogs.com/wsmrzx/p/9439448.html">指令参考</a></p><h2 id="1-7建立远程博客访问"><a href="#1-7建立远程博客访问" class="headerlink" title="1.7建立远程博客访问"></a>1.7建立远程博客访问</h2><h3 id="1-7-1-本地启动hexo"><a href="#1-7-1-本地启动hexo" class="headerlink" title="1.7.1 本地启动hexo"></a>1.7.1 本地启动hexo</h3><p>启动服务器。在路径下，命令行（即Git Bash）输入以下命令，运行即可：</p><figure class="highlight axapta"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs axapta">hexo <span class="hljs-keyword">server</span> 或者 hexo s<br></code></pre></td></tr></table></figure><p>浏览器访问网址：<code>http://localhost:4000/</code></p><p><strong>至此，你的hexo本地博客已经搭建成功。</strong></p><h3 id="1-7-2GithubPages的使用"><a href="#1-7-2GithubPages的使用" class="headerlink" title="1.7.2GithubPages的使用"></a>1.7.2GithubPages的使用</h3><p>在开始之前创建<a href="https://github.com/">github官网</a>账号，并创建一个仓库</p><p><strong>注意仓库名的格式：</strong></p><p>仓库名为：<strong>Github账号名称.github.io</strong></p><p>1.安装 <code>hexo-deployer-git</code>插件。在命令（Git Bash）运行以下命令</p><p><code>$ npm install hexo-deployer-git --save </code></p><p>2.添加SSH key</p><p>创建一个 SSH key 。在命令行（即Git Bash）输入以下命令， 回车三下即可。</p><p>邮箱地址和注册github的邮箱保持一致。</p><p><code>$ ssh-keygen -t rsa -C &quot;邮箱地址&quot; </code></p><p>添加到 github。 复制密钥文件内容（路径形如 <code>C:\users\administrator\.ssh\id_rsa.pub</code>)，粘贴到 <a href="https://github.com/isaacs/node-glob">New SSH KEY</a>即可。</p><p>测试是否添加成功。在命令行（即Git Bash）依次输入以下命令，返回“You’ve successfully authenticated”即成功：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>ssh -T git<span class="hljs-variable">@github</span>.com <br><span class="hljs-variable">$ </span>yes<br></code></pre></td></tr></table></figure><p>3.修改 <strong>_config.yml</strong> （在站点目录下）。文件末尾修改为：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-meta"># Deployment </span><br><span class="hljs-meta">## Docs: https:<span class="hljs-comment">//hexo.io/docs/deployment.html </span></span><br><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">type:</span> git <br><span class="hljs-symbol">repo:</span> git@github.com:<span class="hljs-params">&lt;Github账号名称&gt;</span>/<span class="hljs-params">&lt;Github账号名称&gt;</span>.github.io.git <br><span class="hljs-symbol">branch:</span> master<br></code></pre></td></tr></table></figure><p>注意：上面的格式type和repo的冒号后面需要空格两下；</p><p>​            上面仓库地址写ssh地址，不写http地址 。</p><p>4.推送到GithubPages。在命令行（即Git Bash）依次输入以下命令，返回 <code>INFO Deploy done: git</code>即成功推送：</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g <br><span class="hljs-variable">$ </span>hexo d<br></code></pre></td></tr></table></figure><p>或</p><figure class="highlight elixir"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs elixir"><span class="hljs-variable">$ </span>hexo g -d<br></code></pre></td></tr></table></figure><p>5.等待1分钟左右，浏览器访问网址： <strong>https://&lt;Github账号</strong></p><p><strong>名称&gt;.github.io</strong></p><p><strong>至此，您的Hexo博客已经搭建在GithubPages, 域名为 https://&lt;Github账号名称&gt;.github.io 。</strong></p>]]></content>
    
    
    
    <tags>
      
      <tag>hexo 搭建</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>MonkeyRunner API</title>
    <link href="/2021/08/31/MonkeyRunner-API/"/>
    <url>/2021/08/31/MonkeyRunner-API/</url>
    
    <content type="html"><![CDATA[<p>MonkeyRunner工具主要有三个类：</p><p>1）MonkeyRunner</p><p>2）MonkeyDevice</p><p>3）MonkeyImage</p><p>​    <a href="http://www.android-doc.com/tools/help/monkeyrunner_concepts.html#">官方API文档 </a></p><h1 id="1-MonkeyRunner-类："><a href="#1-MonkeyRunner-类：" class="headerlink" title="1.MonkeyRunner 类："></a>1.MonkeyRunner 类：</h1><p>MonkeyRunner提供连接真机和模拟器、输入、暂停、警告框等方法</p><table><thead><tr><th>alert()</th><th>警告框</th></tr></thead><tbody><tr><td><strong>choice()</strong></td><td><strong>选项列表框</strong></td></tr><tr><td><strong>help()</strong></td><td><strong>API帮助文档</strong></td></tr><tr><td><strong>input()</strong></td><td><strong>输入</strong></td></tr><tr><td><strong>sleep()</strong></td><td><strong>暂停</strong></td></tr><tr><td><strong>waitForConnection()</strong></td><td><strong>等待设备连接</strong></td></tr></tbody></table><h5 id="常用方法"><a href="#常用方法" class="headerlink" title="常用方法"></a><strong>常用方法</strong></h5><p><strong>waitForConnection(float timeout,string deviceid)，</strong></p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> com.android.monkeyrunner import MonkeyRunner as mr<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">&quot;connect devices...&quot;</span>)<br><br><span class="hljs-attribute">device</span>=mr.waitForConnection()<br><span class="hljs-comment"># device=mr.waitForConnection(5,&#x27;127.0.0.1:62001&#x27;)</span><br></code></pre></td></tr></table></figure><h1 id="2-MonkeyDevices类"><a href="#2-MonkeyDevices类" class="headerlink" title="2.MonkeyDevices类"></a>2.MonkeyDevices类</h1><p>MonkeyDevice类提供了安装和卸载程序包、开启Activity、发送按键和点击事件、运行测试包等方法。</p><table><thead><tr><th>broadcastInternt()</th><th>发送广播</th></tr></thead><tbody><tr><td><strong>drag()</strong></td><td><strong>拖动</strong></td></tr><tr><td><strong>getProperty()</strong></td><td><strong>获取当前设备属性</strong></td></tr><tr><td><strong>getSystemProperty()</strong></td><td><strong>获取当前设备属性</strong></td></tr><tr><td><strong>installPackage()</strong></td><td><strong>安装应用</strong></td></tr><tr><td><strong>instrument()</strong></td><td><strong>执行测试用例</strong></td></tr><tr><td><strong>press()</strong></td><td><strong>按键</strong></td></tr><tr><td><strong>reboot()</strong></td><td><strong>重启</strong></td></tr><tr><td><strong>removePackage()</strong></td><td><strong>删除指定Package</strong></td></tr><tr><td><strong>shell()</strong></td><td><strong>执行命令</strong></td></tr><tr><td><strong>startActivity()</strong></td><td><strong>启动应用</strong></td></tr><tr><td><strong>touch()</strong></td><td><strong>点击</strong></td></tr></tbody></table><p><strong>常用方法</strong></p><ul><li><strong>installPackage (string path)</strong></li><li><strong>removePackage (string package)</strong></li><li><strong>startActivity (string uri, string action, string data, string mimetype, iterable categories dictionary extras, component component, flags)</strong></li><li><strong>touch (integer x, integer y, integer type)</strong></li></ul><p><strong>touch参数说明</strong></p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs pgsql"><span class="hljs-type">integer</span> x，x坐标值。<br><span class="hljs-type">integer</span> y，y坐标值。<br><span class="hljs-type">integer</span> <span class="hljs-keyword">type</span>，key event类型（如DOWN、UP、DOWN_AND_UP）。<br><br>DOWN为按下事件 UP为弹起事件 DOWN_AND_UP为按下弹起事件。<br><br>drag (tuple <span class="hljs-keyword">start</span>, tuple <span class="hljs-keyword">end</span>, <span class="hljs-type">float</span> duration, <span class="hljs-type">integer</span> steps)<br></code></pre></td></tr></table></figure><p><strong>drag参数详细说明如下：</strong></p><figure class="highlight nim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs nim"><span class="hljs-keyword">tuple</span> start，拖拽起始位置，为<span class="hljs-keyword">tuple</span>类型的(x,y)坐标点。<br><span class="hljs-keyword">tuple</span> <span class="hljs-keyword">end</span>，拖拽终点位置，为<span class="hljs-keyword">tuple</span>类型的(x,y)坐标点。<br><span class="hljs-built_in">float</span> duration，拖拽手势持续时间，默认为<span class="hljs-number">1</span>.<span class="hljs-number">0</span>s。<br>-integer steps，插值点的步数，默认值为<span class="hljs-number">10</span>。<br></code></pre></td></tr></table></figure><h5 id="实践案例："><a href="#实践案例：" class="headerlink" title="实践案例："></a><strong>实践案例：</strong></h5><p>连接设备，安装考研帮App并启动</p><p><strong>代码如下：</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyRunner <span class="hljs-keyword">as</span> mr<br><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyDevice <span class="hljs-keyword">as</span> md<br><br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;connect devices...&quot;</span>)<br>device=mr.waitForConnection()<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;install app...&quot;</span>)<br>device.installPackage(<span class="hljs-string">r&#x27;C:\Users\admin\Desktop\kaoyan3.1.0.apk&#x27;</span>)<br><br>package = <span class="hljs-string">&#x27;com.tal.kaoyan&#x27;</span><br>activity = <span class="hljs-string">&#x27;com.tal.kaoyan.ui.activity.SplashActivity&#x27;</span><br>runComponent = package + <span class="hljs-string">&#x27;/&#x27;</span> + activity<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;launch App...&quot;</span>)<br>device.startActivity(component=runComponent)<br>代码执行方式<br>monkeyrunner scripfile<br><br>C:\Users\admin&gt;monkeyrunner E:\monkeyrunner_script\kyb.py<br></code></pre></td></tr></table></figure><h1 id="3-MonkeyImage类"><a href="#3-MonkeyImage类" class="headerlink" title="3.MonkeyImage类"></a>3.MonkeyImage类</h1><p>MonkeyImage类在测试过程中用来保存各种格式的测试截图，并可以进行图像对比。</p><table><thead><tr><th><strong>convertToBytes()</strong></th><th><strong>转换图像格式</strong></th></tr></thead><tbody><tr><td><strong>getRawPixel()</strong></td><td><strong>获取当前坐标像素元组</strong></td></tr><tr><td><strong>getRawPixelint()</strong></td><td><strong>获取当前坐标像素元组</strong></td></tr><tr><td><strong>sameAs()</strong></td><td><strong>图像对比</strong></td></tr><tr><td><strong>writeToFile()</strong></td><td><strong>保存图像文件</strong></td></tr><tr><td><strong>getSubimage()</strong></td><td><strong>截取子图像</strong></td></tr></tbody></table><p><strong>常用方法</strong></p><ul><li><p>takeSnapshot() 进行屏幕截图</p></li><li><p>writeToFile() 保存图像文件到指定的文件路径</p></li></ul><p> <strong>用法示例</strong></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> com.android.monkeyrunner <span class="hljs-keyword">import</span> MonkeyImage <span class="hljs-keyword">as</span> mi  <br><span class="hljs-built_in">print</span>(<span class="hljs-string">&quot;takeSnapshot&quot;</span>)<br>screenshot=device.takeSnapshot()  <br>screenshot.writeToFile(<span class="hljs-string">r&#x27;E:\monkeyrunner_script\test.png&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>) <br></code></pre></td></tr></table></figure><h1 id="综合实践"><a href="#综合实践" class="headerlink" title="综合实践"></a>综合实践</h1><h2 id="测试场景"><a href="#测试场景" class="headerlink" title="测试场景"></a>测试场景</h2><ul><li><p>连接设备，自动安装并启动考研帮app</p></li><li><p>启动后登录账号，然后截图并保存到指定文件位置。</p></li></ul><h2 id="思路分析"><a href="#思路分析" class="headerlink" title="思路分析"></a>思路分析</h2><ul><li><p>连接设备</p></li><li><p>安装app</p></li><li><p>启动app</p></li><li><p>输入用户名密码点击登录按钮</p></li><li><p>截图</p></li></ul><h2 id="脚本实现"><a href="#脚本实现" class="headerlink" title="脚本实现"></a>脚本实现</h2><p><strong>kyb_login.py</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs stylus">from com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.monkeyrunner</span> import MonkeyRunner as mr<br>from com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.monkeyrunner</span> import MonkeyDevice as md<br>from com<span class="hljs-selector-class">.android</span><span class="hljs-selector-class">.monkeyrunner</span> import MonkeyImage as mi<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;connect devices...&quot;</span>)</span></span><br><br>device=mr<span class="hljs-selector-class">.waitForConnection</span>()<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot; install app&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.installPackage</span>(r<span class="hljs-string">&#x27;C:\Users\admin\Desktop\kaoyan3.1.0.apk&#x27;</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;launch app...&quot;</span>)</span></span><br>package=<span class="hljs-string">&#x27;com.tal.kaoyan&#x27;</span><br>activity=<span class="hljs-string">&#x27;com.tal.kaoyan.ui.activity.SplashActivity&#x27;</span><br>runComponent=package+<span class="hljs-string">&#x27;/&#x27;</span>+activity<br><br>device<span class="hljs-selector-class">.startActivity</span>(component=runComponent)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">3</span>)<br><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;touch cancel button&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">618</span>,<span class="hljs-number">895</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">1</span>)<br><br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;touch skip button&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">804</span>,<span class="hljs-number">67</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">1</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;input username and password&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">57</span>,<span class="hljs-number">373</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">2</span>)<br>device<span class="hljs-selector-class">.type</span>(账户)<br><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">152</span>,<span class="hljs-number">480</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">2</span>)<br>device<span class="hljs-selector-class">.type</span>(密码)<br>mr<span class="hljs-selector-class">.sleep</span>(<span class="hljs-number">2</span>)<br><br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;touch login button&quot;</span>)</span></span><br>device<span class="hljs-selector-class">.touch</span>(<span class="hljs-number">331</span>,<span class="hljs-number">634</span>,<span class="hljs-string">&#x27;DOWN_AND_UP&#x27;</span>)<br><span class="hljs-function"><span class="hljs-title">print</span><span class="hljs-params">(<span class="hljs-string">&quot;takeSnapshot&quot;</span>)</span></span><br>screenshot=device<span class="hljs-selector-class">.takeSnapshot</span>()<br>screenshot<span class="hljs-selector-class">.writeToFile</span>(r<span class="hljs-string">&#x27;D:\monkeyrunner\kyb.png&#x27;</span>,<span class="hljs-string">&#x27;png&#x27;</span>)<br></code></pre></td></tr></table></figure><h1 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h1><p>方法调用错误</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">AttributeError: <span class="hljs-keyword">type</span> <span class="hljs-keyword">object</span> <span class="hljs-string">&#x27;com.android.monkeyrunner.XXXXX&#x27;</span> has <span class="hljs-keyword">no</span> <span class="hljs-keyword">attribute</span> XXXXXX<br></code></pre></td></tr></table></figure><p>检查调用的方法名是否写错，特别是注意区分大小写。</p><p>字符编码错误</p><figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">SyntaxError: Non-ASCII <span class="hljs-type">character</span> <span class="hljs-keyword">in</span> file <span class="hljs-string">&#x27;E:\monkeyrunner_script\kyb.py&#x27;</span>, but <span class="hljs-keyword">no</span> <span class="hljs-keyword">encoding</span> declared;<br></code></pre></td></tr></table></figure><p>需要在代码顶部补充 # **- coding: utf-8 -**或者去掉代码中的中文字符</p>]]></content>
    
    
    
    <tags>
      
      <tag>Monkeyrunner</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
